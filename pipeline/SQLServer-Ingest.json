{
	"name": "SQLServer-Ingest",
	"properties": {
		"activities": [
			{
				"name": "Set-DestinationRawFile",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set-ADFIngestPipelineRunID",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "_DestinationRawFile",
					"value": {
						"value": "@replace(pipeline().parameters.DestinationRawFile,'GUID',variables('_ADFIngestPipelineRunID'))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Insert-IngestInstance",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Set-DestinationRawFile",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[ELT].[InsertIngestInstance]",
					"storedProcedureParameters": {
						"ADFPipelineRunID": {
							"value": {
								"value": "@variables('_ADFIngestPipelineRunID')",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"DestinationRawFile": {
							"value": {
								"value": "@variables('_DestinationRawFile')",
								"type": "Expression"
							},
							"type": "String"
						},
						"DestinationRawFileSystem": {
							"value": {
								"value": "@pipeline().parameters.DestinationRawFileSystem",
								"type": "Expression"
							},
							"type": "String"
						},
						"DestinationRawFolder": {
							"value": {
								"value": "@pipeline().parameters.DestinationRawFolder",
								"type": "Expression"
							},
							"type": "String"
						},
						"IngestID": {
							"value": {
								"value": "@pipeline().parameters.IngestID",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"ReloadFlag": {
							"value": {
								"value": "@pipeline().parameters.ReloadFlag",
								"type": "Expression"
							},
							"type": "Boolean"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ControlDB",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Copy-RawZone",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Insert-IngestInstance",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": {
							"value": "@pipeline().parameters.SourceQuery",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false,
					"dataIntegrationUnits": 32
				},
				"inputs": [
					{
						"referenceName": "SQLServer_Table",
						"type": "DatasetReference",
						"parameters": {
							"SchemaName": {
								"value": "@{split(pipeline().parameters.EntityName, '.')[0]}",
								"type": "Expression"
							},
							"TableName": {
								"value": "@replace(substring(pipeline().parameters.EntityName, indexof(pipeline().parameters.EntityName,'.'), sub(length(pipeline().parameters.EntityName), indexof(pipeline().parameters.EntityName,'.'))), '.', '')",
								"type": "Expression"
							},
							"SQLServerConnectionString": {
								"value": "@pipeline().parameters.KeyVaultSQLConnString",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "Bronze_Parquet",
						"type": "DatasetReference",
						"parameters": {
							"FileSystem": {
								"value": "@pipeline().parameters.DestinationRawFileSystem",
								"type": "Expression"
							},
							"Folder": {
								"value": "@pipeline().parameters.DestinationRawFolder",
								"type": "Expression"
							},
							"File": {
								"value": "@variables('_DestinationRawFile')",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Set-ADFIngestPipelineRunID",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "_ADFIngestPipelineRunID",
					"value": {
						"value": "@pipeline().RunId",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Get-Stats",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Insert-IngestInstance",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": {
							"value": "@pipeline().parameters.StatQuery",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "SQLServer_Table",
						"type": "DatasetReference",
						"parameters": {
							"SchemaName": {
								"value": "@{split(pipeline().parameters.EntityName, '.')[0]}",
								"type": "Expression"
							},
							"TableName": {
								"value": "@replace(substring(pipeline().parameters.EntityName, indexof(pipeline().parameters.EntityName,'.'), sub(length(pipeline().parameters.EntityName), indexof(pipeline().parameters.EntityName,'.'))), '.', '')",
								"type": "Expression"
							},
							"SQLServerConnectionString": {
								"value": "@pipeline().parameters.KeyVaultSQLConnString",
								"type": "Expression"
							}
						}
					}
				}
			}
		],
		"parameters": {
			"IngestID": {
				"type": "string",
				"defaultValue": "4"
			},
			"SourceSystemName": {
				"type": "string",
				"defaultValue": "Adventureworks"
			},
			"StreamName": {
				"type": "string",
				"defaultValue": "Person Address"
			},
			"EntityName": {
				"type": "string",
				"defaultValue": "Person.Address"
			},
			"DataFromTimestamp": {
				"type": "string",
				"defaultValue": "1900-01-01 00:00:00.0000000"
			},
			"DataToTimestamp": {
				"type": "string",
				"defaultValue": "2022-10-23 13:16:16.0000000"
			},
			"RunSequence": {
				"type": "string",
				"defaultValue": "100"
			},
			"L1TransformationReqdFlag": {
				"type": "bool",
				"defaultValue": true
			},
			"L2TransformationReqdFlag": {
				"type": "bool",
				"defaultValue": true
			},
			"DestinationRawFileSystem": {
				"type": "string",
				"defaultValue": "raw-bronze"
			},
			"DestinationRawFolder": {
				"type": "string",
				"defaultValue": "adventureworks/personaddress/1900-01"
			},
			"DestinationRawFile": {
				"type": "string",
				"defaultValue": "person_address_19000101_GUID.parquet"
			},
			"SourceQuery": {
				"type": "string",
				"defaultValue": "SELECT * FROM Person.Address WHERE ModifiedDate > '1900-01-01 00:00:00.000' AND ModifiedDate<='2022-10-23 13:16:16'"
			},
			"StatQuery": {
				"type": "string",
				"defaultValue": "SELECT MIN(ModifiedDate) AS DataFromTimestamp, MAX(ModifiedDate) AS DataToTimestamp, count(1) as SourceCount FROM Person.Address WHERE ModifiedDate > '1900-01-01 00:00:00.000' AND ModifiedDate <= '2022-10-23 13:16:16'"
			},
			"ReloadFlag": {
				"type": "bool",
				"defaultValue": false
			},
			"KeyVaultSQLConnString": {
				"type": "string",
				"defaultValue": "Adventureworks-SQLServer-ConnString"
			}
		},
		"variables": {
			"_ADFIngestPipelineRunID": {
				"type": "String"
			},
			"_DestinationRawFile": {
				"type": "String"
			},
			"_StatFileFolder": {
				"type": "String"
			},
			"_StatFile": {
				"type": "String"
			},
			"_StatFileSystem": {
				"type": "String"
			},
			"_DataFromTimestamp": {
				"type": "String"
			},
			"_DataToTimestamp": {
				"type": "String"
			},
			"_SourceCount": {
				"type": "String"
			},
			"_MaxDeltaDate": {
				"type": "String"
			},
			"_SchemaName": {
				"type": "String"
			},
			"_TableName": {
				"type": "String"
			}
		},
		"folder": {
			"name": "SQL Server"
		},
		"annotations": []
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}