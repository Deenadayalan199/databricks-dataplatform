{
	"name": "upsert-function",
	"properties": {
		"description": "Notebook that implements upsert function using Pyodbc",
		"folder": {
			"name": "common"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "small31",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "b688b321-27fa-4e1c-9008-9131b8300a67"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5a5ba4fb-f4e0-4eaf-a2d3-7db71dfd729d/resourceGroups/rg-dataplatform/providers/Microsoft.Synapse/workspaces/ba-synapseanalytics01/bigDataPools/small31",
				"name": "small31",
				"type": "Spark",
				"endpoint": "https://ba-synapseanalytics01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/small31",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Re-usable Upsert function for Azure SQL Server/Azure Synapse Analytics SQL Dedicated Pool"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"server=\"<SynapseWorkspaceName>.sql.azuresynapse.net,1433\"\r\n",
					"database = \"<DedicatedSQLPool>\"\r\n",
					"sqlUidSecret = \"Azure Key Vault Secret for DedicatedSQLPool user name\"\r\n",
					"sqlPwdSecret = \"Azure Key Vault Secret for DedicatedSQLPool password\""
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"source": [
					"%run /common/keyvault-functions {\"kvLinkedService\": \"keyvault01\"}"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /common/dedicatedSQL-functions {\"server\": \"ba-synapseanalytics01.sql.azuresynapse.net,1433\",\"database\" : \"dw01\"}"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sqlUidSecret = \"dw01-sqlusername\"\r\n",
					"sqlPwdSecret = \"dw01-sqlpassword\"\r\n",
					"server =\"ba-synapseanalytics01.sql.azuresynapse.net,1433\"\r\n",
					"database = \"dw01\""
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"uid = getSecret(sqlUidSecret)\r\n",
					"pwd = getSecret(sqlPwdSecret)\r\n",
					"\r\n",
					"import pyodbc\r\n",
					"cnxn = pyodbc.connect(\"DRIVER={ODBC Driver 17 for SQL Server};SERVER=\" + server + \";DATABASE=\" + database + \";UID=\" + uid + \";PWD=\" + pwd )\r\n",
					"cursor = cnxn.cursor()\r\n",
					"cnxn.autocommit = True"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def upsert(df,SchemaStagingTable,StagingTable, SchemaTargetTable, TargetTable, KeyColumns, DeltaColumn=None) :\r\n",
					"# ##########################################################################################################################  \r\n",
					"# Function: upsert\r\n",
					"# Performs a Merge/Upsert action on a Azure SQL table\r\n",
					"# \r\n",
					"# Parameters:\r\n",
					"# df = Input dataframe\r\n",
					"# StagingTable = Name of Table used to temporarily stage the input data frame\r\n",
					"# SchemaStagingTable = Database schema of staging table\r\n",
					"# SchemaTargetTable = Database schema of target table\r\n",
					"# TargetTable  = Name of Target Table\r\n",
					"# KeyColumns = List of columns that uniquely defines a record in input dataframe\r\n",
					"# DeltaColumn = Name of watermark column in input dataframe\r\n",
					"#\r\n",
					"# Returns:\r\n",
					"# None\r\n",
					"# ##########################################################################################################################  \r\n",
					"    insertSdpTable(df, SchemaStagingTable,StagingTable, \"overwrite\")\r\n",
					"    insertCols=\"\"\r\n",
					"    updateCols=\"\"\r\n",
					"    whereCols =\"\"\r\n",
					"    keyCols = \"\"\r\n",
					"\r\n",
					"    # MATCHED Clause of MERGE\r\n",
					"    for keyCol in KeyColumns:\r\n",
					"        keyCols = keyCols + \"source.\" + keyCol + \" = \" + \"target.\" + keyCol + \" and \"\r\n",
					"\r\n",
					"    whereClause = keyCols\r\n",
					"    #Tidy up where clause and remove last \"and\"\r\n",
					"    remove=\"and\"\r\n",
					"    reverse_remove=remove[::-1]\r\n",
					"    whereClause = whereClause[::-1].replace(reverse_remove,\"\",1)[::-1]\r\n",
					"\r\n",
					"    # INSERT and UPDATE part of MERGE\r\n",
					"    for col in df.schema.fieldNames():\r\n",
					"        insertCols = insertCols + col + \",\"\r\n",
					"        updateCols =  updateCols + \"target.\" + col + \" = \" + \"source.\" + col + \",\"\r\n",
					"\r\n",
					"    #Tidy up insertCols and remove last \",\"\r\n",
					"    remove=\",\"\r\n",
					"    reverse_remove=remove[::-1]\r\n",
					"    insertCols = insertCols[::-1].replace(reverse_remove,\"\",1)[::-1]  \r\n",
					"\r\n",
					"    #Tidy up insertCols and remove last \",\"\r\n",
					"    remove=\",\"\r\n",
					"    reverse_remove=remove[::-1]\r\n",
					"    updateCols = updateCols[::-1].replace(reverse_remove,\"\",1)[::-1]   \r\n",
					"\r\n",
					"    # MERGE Statement in full\r\n",
					"    mergeSQL= \"MERGE INTO \" + SchemaTargetTable +\".\" + TargetTable + \" AS target\" +  \" USING \" + SchemaStagingTable + \".\" + StagingTable + \" AS source\" + \" ON \"\r\n",
					"    mergeSQL = mergeSQL + whereClause\r\n",
					"\r\n",
					"    # WHEN MATCHED\r\n",
					"    if DeltaColumn != None:\r\n",
					"        mergeSQL =  mergeSQL + \" WHEN MATCHED AND \" + \"source.\" + DeltaColumn + \" > \" + \"target.\" + DeltaColumn \r\n",
					"    else:\r\n",
					"        mergeSQL =  mergeSQL + \" WHEN MATCHED\"\r\n",
					"\r\n",
					"    mergeSQL = mergeSQL + \" THEN UPDATE SET \" + updateCols\r\n",
					"\r\n",
					"    # WHEN NOT MATCHED BY TARGET\r\n",
					"    mergeSQL = mergeSQL + \" WHEN NOT MATCHED BY TARGET \" # including BY TARGET clause for Synapse requires the table to be Hash Distributed\r\n",
					"    mergeSQL = mergeSQL + \" THEN INSERT \" +  \"(\"+ insertCols +\")\" + \" VALUES \" + \" ( \"+ insertCols +\" ) \"\r\n",
					"\r\n",
					"    mergeSQL = mergeSQL +\";\"\r\n",
					"    print(\"Upsert statement to be executed: {} \".format(mergeSQL))\r\n",
					"    return"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df =readSdpTable(\"nyct\",\"nyc_tlc_yellow_trip\",None,None,10)"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"upsert(df,\"nyct\",\"nyc_tlc_yellow_trip_stage\", \"nyct\", \"nyc_tlc_yellow_trip\", [\"vendorID\",\"tpepPickupDateTime\",\"tpepDropoffDateTime\"], DeltaColumn=None) "
				],
				"execution_count": 23
			}
		]
	}
}