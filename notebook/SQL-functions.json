{
	"name": "SQL-functions",
	"properties": {
		"description": "Reusable functions for Azure SQL and SQL Server",
		"folder": {
			"name": "common"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "small31",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "22967608-38fc-4690-be78-c9b734c2739f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5a5ba4fb-f4e0-4eaf-a2d3-7db71dfd729d/resourceGroups/rg-dataplatform/providers/Microsoft.Synapse/workspaces/ba-synapseanalytics01/bigDataPools/small31",
				"name": "small31",
				"type": "Spark",
				"endpoint": "https://ba-synapseanalytics01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/small31",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Re-usable functions for Azure SQL and SQL Server"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /common/keyvault-functions {\"kvLinkedService\": \"keyvault01\"}"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"server=\"<Azure SQL Server/ SQL Server>\"\r\n",
					"database = \"<Database Name>\"\r\n",
					"usernameSecret = \"<Azure Key Vault Secret for SQL User>\"\r\n",
					"passwordSecret = \"<Azure Key Vault Secret for SQL User Password>\""
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# getJdbcUrl()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def getJdbcUrl():\r\n",
					"  # ##########################################################################################################################  \r\n",
					"  # Function: getJdbcUrl\r\n",
					"  # Creates the JDBC Connection String from the input parameters to this notebook\r\n",
					"  # \r\n",
					"  # Parameters:\r\n",
					"  # None\r\n",
					"  #\r\n",
					"  # Returns:\r\n",
					"  # JDBC Connection String\r\n",
					"  # ##########################################################################################################################  \r\n",
					"    assert server is not None, \"server not specified\"\r\n",
					"    assert database is not None, \"database not specified\"\r\n",
					"    assert usernameSecret is not None, \"usernameSecret not specified\"\r\n",
					"    assert passwordSecret is not None, \"passwordSecret not specified\"\r\n",
					"\r\n",
					"    user =  getSecret(usernameSecret)\r\n",
					"    password = getSecret(passwordSecret)\r\n",
					"    jdbcUrl = \"jdbc:sqlserver://\" + server + \".database.windows.net:1433;database=\" + database + \";user=\" + user + \"@\" + server + \";password=\" + password + \";encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;\"\r\n",
					"    return jdbcUrl"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# readTable()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def readTable(table):\r\n",
					"  # ##########################################################################################################################  \r\n",
					"  # Function: readTable\r\n",
					"  # Reads all the rows and columns of an Azure SQL table/view and returns the records as dataframe\r\n",
					"  # \r\n",
					"  # Parameters:\r\n",
					"  # table = Input Table/View including the schema name. E.g soccer.goalpost, afl.goalpost\r\n",
					"  #\r\n",
					"  # Returns:\r\n",
					"  # Dataframe containing all rows and columns of a table/view in Azure SQL\r\n",
					"  # ##########################################################################################################################  \r\n",
					"    assert table is not None, \"table not specified\"\r\n",
					"\r\n",
					"    jdbcUrl = getJdbcUrl()\r\n",
					"\r\n",
					"    try:\r\n",
					"      df = (spark.read\r\n",
					"              .format(\"jdbc\")\r\n",
					"              .option(\"driver\",\"com.microsoft.sqlserver.jdbc.SQLServerDriver\")\r\n",
					"              .option(\"url\",jdbcUrl)\r\n",
					"              .option(\"dbtable\",table)\r\n",
					"              .load()\r\n",
					"          )\r\n",
					"    except Exception as e:\r\n",
					"        print(\"readTable({}) failed with exception:\".format(table))\r\n",
					"        raise e\r\n",
					"\r\n",
					"\r\n",
					"    ## Use Apache Spark Connector in Future instead of JDBC connector for faster execution. At the moment Apache Spark Connector is not available on newer Spark Runtime\r\n",
					"    ## Have to install a library from maven coordinates:com.microsoft.azure:spark-mssql-connector_2.12:1.2.0\r\n",
					"    ## https://docs.microsoft.com/en-us/sql/connect/spark/connector?view=sql-server-ver16\r\n",
					"    #   df = (spark.read\r\n",
					"    #           .format(\"com.microsoft.sqlserver.jdbc.spark\")\r\n",
					"    #           .option(\"url\",jdbcUrl)\r\n",
					"    #           .option(\"dbtable\",table)\r\n",
					"    #           .load()\r\n",
					"    #       )\r\n",
					"    return df"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# readQuery()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def readQuery(query):\r\n",
					"  # ##########################################################################################################################  \r\n",
					"  # Function: readQuery\r\n",
					"  # Executes the input query at Azure SQL and returns the records as dataframe\r\n",
					"  # \r\n",
					"  # Parameters:\r\n",
					"  # query = A valid input query\r\n",
					"  #\r\n",
					"  # Returns:\r\n",
					"  # Dataframe containing all rows and columns returned by query from Azure SQL\r\n",
					"  # ##########################################################################################################################  \r\n",
					"  assert query is not None, \"query not specified\"\r\n",
					"\r\n",
					"  jdbcUrl = getJdbcUrl()\r\n",
					"  try:\r\n",
					"    df = (spark.read\r\n",
					"            .format(\"jdbc\")\r\n",
					"            .option(\"driver\",\"com.microsoft.sqlserver.jdbc.SQLServerDriver\")\r\n",
					"            .option(\"url\",jdbcUrl)\r\n",
					"            .option(\"query\",query)\r\n",
					"            .load()\r\n",
					"        )\r\n",
					"  except Exception as e:\r\n",
					"        print(\"readQuery({}) failed with exception:\".format(query))\r\n",
					"        raise e\r\n",
					"    ## Use Apache Spark Connector in Future instead of JDBC connector for faster execution. At the moment Apache Spark Connector is not available on newer Spark Runtime\r\n",
					"    ## Have to install a library from maven coordinates:com.microsoft.azure:spark-mssql-connector_2.12:1.2.0\r\n",
					"    ## https://docs.microsoft.com/en-us/sql/connect/spark/connector?view=sql-server-ver16\r\n",
					"    #   df = (spark.read\r\n",
					"    #           .format(\"com.microsoft.sqlserver.jdbc.spark\")\r\n",
					"    #           .option(\"url\",jdbcUrl)\r\n",
					"    #           .option(\"dbtable\",table)\r\n",
					"    #           .load()\r\n",
					"    #       )\r\n",
					"  return df"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# insertTable()"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def insertTable(df,table,writeMode,preserveSchema = None):\r\n",
					"  # ##########################################################################################################################  \r\n",
					"  # Function: insertTable\r\n",
					"  # Inserts a dataframe to a Azure SQL\r\n",
					"  # \r\n",
					"  # Parameters:\r\n",
					"  # df = Input dataframe\r\n",
					"  # table = Target table where the datafframe is loaded\r\n",
					"  # writeMode = Describes how data from dataframe is inserted to datawarehouse table. Allowed values are - append/overwrite/ignore/error/errorifexists\r\n",
					"  # preserveSchema = True/False. Applicable only in overwrite mode when schema needs to be preserved\r\n",
					"  # Returns:\r\n",
					"  # None\r\n",
					"  # ########################################################################################################################## \r\n",
					"  assert table is not None, \"query not specified\"\r\n",
					"  assert writeMode is not None, \"writeMode not specified\"\r\n",
					"  assert writeMode in [\"append\",\"overwrite\",\"ignore\",\"error\",\"errorifexists\"] , \"writeMode is invalid. Allowed values are append,overwrite,ignore,error,errorifexists\"\r\n",
					"\r\n",
					"  jdbcUrl = getJdbcUrl()\r\n",
					"  \r\n",
					"  try:\r\n",
					"    if writeMode == \"overwrite\" and preserveSchema == True :\r\n",
					"      #Truncate and Append instead of overwrite to preserve table schema\r\n",
					"      (df.write\r\n",
					"      .format(\"jdbc\")\r\n",
					"      .option(\"driver\",\"com.microsoft.sqlserver.jdbc.SQLServerDriver\")\r\n",
					"      .option(\"url\",jdbcUrl)\r\n",
					"      .mode(\"append\")\r\n",
					"      .option(\"truncate\", \"true\") # Must be string \"true\" and not boolean True\r\n",
					"      .option(\"dbtable\",table)\r\n",
					"      .save()\r\n",
					"      )\r\n",
					"    else:\r\n",
					"      (df.write\r\n",
					"      .format(\"jdbc\")\r\n",
					"      .option(\"driver\",\"com.microsoft.sqlserver.jdbc.SQLServerDriver\")\r\n",
					"      .option(\"url\",jdbcUrl)\r\n",
					"      .mode(writeMode)\r\n",
					"      .option(\"dbtable\",table)\r\n",
					"      .save()\r\n",
					"      ) \r\n",
					"  except Exception as e:\r\n",
					"        print(\"insertTable({}) failed with exception:\".format(query))\r\n",
					"        raise e \r\n",
					"    ## Use Apache Spark Connector in Future instead of JDBC connector for faster execution. At the moment Apache Spark Connector is not available on newer Spark Runtime\r\n",
					"    ## Have to install a library from maven coordinates:com.microsoft.azure:spark-mssql-connector_2.12:1.2.0\r\n",
					"    ## https://docs.microsoft.com/en-us/sql/connect/spark/connector?view=sql-server-ver16\r\n",
					"    #   df = (spark.read\r\n",
					"    #           .format(\"com.microsoft.sqlserver.jdbc.spark\")\r\n",
					"    #           .option(\"url\",jdbcUrl)\r\n",
					"    #           .option(\"dbtable\",table)\r\n",
					"    #           .load()\r\n",
					"    #       )"
				],
				"execution_count": 7
			}
		]
	}
}