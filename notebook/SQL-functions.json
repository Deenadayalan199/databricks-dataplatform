{
	"name": "SQL-functions",
	"properties": {
		"description": "Reusable functions for Azure SQL and SQL Server",
		"folder": {
			"name": "common"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "small31",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "b97e2d7c-b504-4949-b1fc-06ff53ce908b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5a5ba4fb-f4e0-4eaf-a2d3-7db71dfd729d/resourceGroups/rg-dataplatform/providers/Microsoft.Synapse/workspaces/ba-synapseanalytics01/bigDataPools/small31",
				"name": "small31",
				"type": "Spark",
				"endpoint": "https://ba-synapseanalytics01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/small31",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Re-usable functions for Azure Synapse SQL Dedicated Pool"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /common/keyvault-functions {\"kvLinkedService\": \"keyvault01\"}"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /common/AAD-functions {\"tenandIdSecret\":\"TenantID\", \"servicePrincipalIdSecret\": \"ba-automation-spn-clientID\",\"servicePrincipalSecret\": \"ba-automation-spn\",\"authUrl\": \"https://login.windows.net\",\"resourceUrl\": \"https://database.windows.net/\"}"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"server=\"<SynapseWorkspaceName>.sql.azuresynapse.net,1433\"\r\n",
					"database = \"<Azure SQL Server/ SQL Server>\""
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Initialize Variables"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"url = server+ \";\" + \"databaseName=\" + database + \";\""
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def readTable(table):\r\n",
					"  # ##########################################################################################################################  \r\n",
					"  # Function: readTable\r\n",
					"  # Reads all the rows and columns of an Azure SQL table/view and returns the records as dataframe\r\n",
					"  # \r\n",
					"  # Parameters:\r\n",
					"  # table = Input Table/View including the schema name. E.g soccer.goalpost, afl.goalpost\r\n",
					"  #\r\n",
					"  # Returns:\r\n",
					"  # Dataframe containing all rows and columns of a table/view in Azure SQL\r\n",
					"  # ##########################################################################################################################  \r\n",
					"    bearerToken = getBearerToken()\r\n",
					"\r\n",
					"    df = (spark.read    \r\n",
					"                .format(\"com.microsoft.sqlserver.jdbc.spark\")\r\n",
					"                .option(\"url\",url)\r\n",
					"                .option(\"dbtable\", dbtable) \r\n",
					"                .option(\"accessToken\", bearerToken)\r\n",
					"                .option(\"encrypt\", \"true\") #Note: String \"true\" not boolean True\r\n",
					"                .option(\"hostNameInCertificate\", \"*.database.windows.net\")\r\n",
					"                .load()\r\n",
					"        )\r\n",
					"    return df"
				],
				"execution_count": null
			}
		]
	}
}