{
	"name": "test-pyodbc",
	"properties": {
		"folder": {
			"name": "tester"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "medium",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "9b6bd386-0326-4107-a7a1-1f825d3a8860"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5a5ba4fb-f4e0-4eaf-a2d3-7db71dfd729d/resourceGroups/rg-dataplatform/providers/Microsoft.Synapse/workspaces/ba-synapseanalytics01/bigDataPools/medium",
				"name": "medium",
				"type": "Spark",
				"endpoint": "https://ba-synapseanalytics01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/medium",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Re-usable functions for Azure Synapse SQL Dedicated Pool"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /common/keyvault-functions {\"kvLinkedService\": \"keyvault01\"}"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"server = \"ba-synapseanalytics01.sql.azuresynapse.net,1433\"\r\n",
					"database = \"dw01\""
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"uid = getSecret(\"dw01-sqlusername\")\r\n",
					"pwd = getSecret(\"dw01-sqlpassword\")"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyodbc\r\n",
					"\r\n",
					"cnxn = pyodbc.connect(\"DRIVER={ODBC Driver 17 for SQL Server};SERVER=\" + server + \";DATABASE=\" + database + \";UID=\" + uid + \";PWD=\" + pwd )\r\n",
					"cursor = cnxn.cursor()\r\n",
					"cnxn.autocommit = True"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cursor.execute(\"truncate table dbo.DimActors\")\r\n",
					"row = cursor.fetchone()\r\n",
					"if row:\r\n",
					"    print(row)\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sql = \"\"\"INSERT INTO stg.nyc_tlc_yellow_trip (vendorID,tpepPickupDateTime,tpepDropoffDateTime,passengerCount,tripDistance,puLocationId,doLocationId,startLon,startLat,endLon,endLat,rateCodeId,storeAndFwdFlag\r\n",
					"      ,paymentType\r\n",
					"      ,fareAmount\r\n",
					"      ,extra\r\n",
					"      ,mtaTax\r\n",
					"      ,improvementSurcharge\r\n",
					"      ,tipAmount\r\n",
					"      ,tollsAmount\r\n",
					"      ,totalAmount)\r\n",
					"SELECT top 100 vendorID\r\n",
					"      ,tpepPickupDateTime\r\n",
					"      ,tpepDropoffDateTime\r\n",
					"      ,passengerCount\r\n",
					"      ,tripDistance\r\n",
					"      ,puLocationId\r\n",
					"      ,doLocationId\r\n",
					"      ,startLon\r\n",
					"      ,startLat\r\n",
					"      ,endLon\r\n",
					"      ,endLat\r\n",
					"      ,rateCodeId\r\n",
					"      ,storeAndFwdFlag\r\n",
					"      ,paymentType\r\n",
					"      ,fareAmount\r\n",
					"      ,extra\r\n",
					"      ,mtaTax\r\n",
					"      ,improvementSurcharge\r\n",
					"      ,tipAmount\r\n",
					"      ,tollsAmount\r\n",
					"      ,totalAmount\r\n",
					"  FROM nyct.nyc_tlc_yellow_trip\r\n",
					"  WHERE NOT EXISTS\r\n",
					"  (SELECT 1 FROM stg.nyc_tlc_yellow_trip\r\n",
					"  where stg.nyc_tlc_yellow_trip.vendorID= nyct.nyc_tlc_yellow_trip.vendorID\r\n",
					"  and stg.nyc_tlc_yellow_trip.tpepPickupDateTime = nyct.nyc_tlc_yellow_trip.tpepPickupDateTime\r\n",
					"  and stg.nyc_tlc_yellow_trip.tpepDropoffDateTime = nyct.nyc_tlc_yellow_trip.tpepDropoffDateTime)\"\"\"\r\n",
					"\r\n",
					"cursor.execute(sql)"
				],
				"execution_count": 21
			}
		]
	}
}