{
	"name": "datalake-functions",
	"properties": {
		"folder": {
			"name": "common"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "small",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5a5ba4fb-f4e0-4eaf-a2d3-7db71dfd729d/resourceGroups/rg-dataplatform/providers/Microsoft.Synapse/workspaces/ba-synapseanalytics01/bigDataPools/small",
				"name": "small",
				"type": "Spark",
				"endpoint": "https://ba-synapseanalytics01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/small",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from notebookutils import mssparkutils"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# readFile()"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def readFile(storageAccount, fileSystem, folder, file, colSeparator, headerFlag):\r\n",
					"  # ##########################################################################################################################  \r\n",
					"  # Function: readFile\r\n",
					"  # Reads a file from Azure Gen2 Storage and returns as dataframe\r\n",
					"  # \r\n",
					"  # Parameters:\r\n",
					"  # storageAccount = Name of Storage Account  \r\n",
					"  # fileSystem = File System/Container of Azure Data Lake Storage\r\n",
					"  # folder = folder name\r\n",
					"  # file = file name including extension\r\n",
					"  # colSeparator = Column separator for text files\r\n",
					"  # headerFlag = boolean flag to indicate whether the text file has a header or not  \r\n",
					"  # \r\n",
					"  # Returns:\r\n",
					"  # A dataframe of the raw file\r\n",
					"  # ##########################################################################################################################    \r\n",
					"\r\n",
					"    filePath = \"abfss://\" + fileSystem + \"@\"+ storageAccount + \".dfs.core.windows.net/\" + folder + \"/\" + file\r\n",
					"    if \".csv\" in file or \".txt\" in file:\r\n",
					"        df = spark.read.csv(path=filePath, sep=colSeparator, header=headerFlag, inferSchema=\"true\")\r\n",
					"    elif \".parquet\" in file:\r\n",
					"        df = spark.read.parquet(filePath)\r\n",
					"    elif \".orc\" in file:\r\n",
					"        df = spark.read.orc(filePath)\r\n",
					"    else:\r\n",
					"        df = spark.read.format(\"csv\").load(filePath)\r\n",
					"  \r\n",
					"    df =df.dropDuplicates()\r\n",
					"    return df\r\n",
					""
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# writeFile()"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def writeFile(df,storageAccount, fileSystem, folder, file, writeMode=\"overwrite\", colSeparator=\",\"):\r\n",
					"  # ##########################################################################################################################  \r\n",
					"  # Function: writeFile\r\n",
					"  # Writes the input dataframe to a file in Azure Gen2 Storage\r\n",
					"  # \r\n",
					"  # Parameters:\r\n",
					"  # df= input dataframe\r\n",
					"  # storageAccount = Name of Storage Account\r\n",
					"  # fileSystem = File System/Container of Azure Data Lake Storage\r\n",
					"  # folder = folder name\r\n",
					"  # file = file name including extension\r\n",
					"  # writeMode= mode of writing the curated file. Allowed values - append/overwrite/ignore/error/errorifexists\r\n",
					"  # colSeparator = Column separator for text files\r\n",
					"  # \r\n",
					"  # Returns:\r\n",
					"  # A dataframe of the raw file\r\n",
					"  # ##########################################################################################################################     \r\n",
					"    filePath = \"abfss://\" + fileSystem + \"@\"+ storageAccount + \".dfs.core.windows.net/\" + folder + \"/\" + file\r\n",
					"    if \"csv\" in file or 'txt' in file:\r\n",
					"        df.write.csv(filePath,mode=writeMode,sep=colSeparator,header=\"true\")\r\n",
					"    elif \"parquet\" in file:\r\n",
					"        df.write.parquet(filePath,mode=writeMode)\r\n",
					"    elif \"orc\" in file:\r\n",
					"        df.write.orc(filePath,mode=writeMode)\r\n",
					"    elif \"json\" in file:\r\n",
					"        df.write.json(filePath, mode=writeMode)\r\n",
					"    else:\r\n",
					"        df.write.save(path=filePath,format=\"csv\",mode=writeMode)\r\n",
					"    return\r\n",
					""
				],
				"attachments": null,
				"execution_count": null
			}
		]
	}
}