{
	"name": "dedicatedSQL-functions",
	"properties": {
		"folder": {
			"name": "common"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "small31",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "12081936-d741-4b49-ae69-f10590229a89"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5a5ba4fb-f4e0-4eaf-a2d3-7db71dfd729d/resourceGroups/rg-dataplatform/providers/Microsoft.Synapse/workspaces/ba-synapseanalytics01/bigDataPools/small31",
				"name": "small31",
				"type": "Spark",
				"endpoint": "https://ba-synapseanalytics01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/small31",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Re-usable functions for Azure Synapse SQL Dedicated Pool"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run /common/keyvault-functions {\"kvLinkedService\": \"keyvault01\"}"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"server = \"ba-synapseanalytics01.sql.azuresynapse.net,1433\"\r\n",
					"database = \"dw01\"\r\n",
					"sqlUidSecret = \"dw01-sqlusername\"\r\n",
					"sqlPwdSecret = \"dw01-sqlpassword\""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import com.microsoft.spark.sqlanalytics\r\n",
					"# import org.apache.spark.sql.sqlanalytics\r\n",
					"from com.microsoft.spark.sqlanalytics.Constants import Constants"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"uid = getSecret(sqlUidSecret)\r\n",
					"pwd = getSecret(sqlPwdSecret)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def readSdpTable(schema,table,colList=None,filterCondition=None,limitRows=None):\r\n",
					"  # ##########################################################################################################################  \r\n",
					"  # Function: readSdpTable\r\n",
					"  # Reads records from the Azure Synapse Dedicated Pool table and returns as dataframe\r\n",
					"  # \r\n",
					"  # Parameters:\r\n",
					"  #     schema          = Schema name of the Azure Synapse Dedicated Pool table.\r\n",
					"  #     table           = Table Name.\r\n",
					"  #     colList         = (Optional) List of columns to be returned in the dataframe. \r\n",
					"  #                       E.g [\"col1\",\"col2\",\"col3\"].\r\n",
					"  #                       Returns all columns if none provided.\r\n",
					"  #     filterCondition = (Optional) Expression to filter the dataframe as push-down filter to database. \r\n",
					"  #                       E.g col(\"Title\").contains(\"E\").\r\n",
					"  #                       Returns all rows when not provided.\r\n",
					"  #     limitRows       = (Optional) Integer to fetch N records from the table.\r\n",
					"  #                       Returns all rows when none provided.\r\n",
					"  #\r\n",
					"  # Returns:\r\n",
					"  # Dataframe containing all rows and columns of a table/view in Azure Datawarehouse\r\n",
					"  # ##########################################################################################################################  \r\n",
					"# df = (spark.read\r\n",
					"#             .option(Constants.SERVER,server)\r\n",
					"#             .option(Constants.TEMP_FOLDER)\r\n",
					"# )"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pyodbc\r\n",
					"cnxn = pyodbc.connect(\"DRIVER={ODBC Driver 17 for SQL Server};SERVER=\" + server + \";DATABASE=\" + database + \";UID=\" + uid + \";PWD=\" + pwd )\r\n",
					"cursor = cnxn.cursor()\r\n",
					"cnxn.autocommit = True"
				],
				"execution_count": 6
			}
		]
	}
}