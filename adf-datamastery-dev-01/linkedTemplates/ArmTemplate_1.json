{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-datamastery-dev-01"
		},
		"Salesforce_properties_typeProperties_environmentUrl": {
			"type": "object",
			"defaultValue": {
				"type": "AzureKeyVaultSecret",
				"store": {
					"referenceName": "KeyVault01",
					"type": "LinkedServiceReference"
				},
				"secretName": {
					"value": "@linkedService().EnvironmentUrl",
					"type": "Expression"
				}
			}
		},
		"Salesforce_properties_typeProperties_username": {
			"type": "object",
			"defaultValue": {
				"type": "AzureKeyVaultSecret",
				"store": {
					"referenceName": "KeyVault01",
					"type": "LinkedServiceReference"
				},
				"secretName": {
					"value": "@linkedService().UserName",
					"type": "Expression"
				}
			}
		},
		"DropZone - File Created_properties_FileDrop-Master_parameters_SourceFile": {
			"type": "string",
			"defaultValue": "@triggerBody().folderPath"
		},
		"DropZone - File Created_properties_FileDrop-Master_parameters_SourceFolder": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"DropZone - File Created_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/0050b161-81d7-4cad-ab40-279ecb440b43/resourceGroups/rg-datamastery-dev-01/providers/Microsoft.Storage/storageAccounts/dlsdatamasterydev01"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Salesforce')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Salesforce",
				"parameters": {
					"EnvironmentUrl": {
						"type": "String"
					},
					"UserName": {
						"type": "String"
					},
					"Password": {
						"type": "String"
					},
					"SecurityToken": {
						"type": "String"
					}
				},
				"annotations": [],
				"typeProperties": {
					"environmentUrl": "[parameters('Salesforce_properties_typeProperties_environmentUrl')]",
					"username": "[parameters('Salesforce_properties_typeProperties_username')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVault01",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().Password",
							"type": "Expression"
						}
					},
					"securityToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVault01",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().SecurityToken",
							"type": "Expression"
						}
					},
					"apiVersion": "53.0"
				},
				"description": "Salesforce"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADX-Ingest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set-DestinationRawFile",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set-ADFIngestPipelineRunID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_DestinationRawFile",
							"value": {
								"value": "@replace(pipeline().parameters.DestinationRawFile,'GUID',variables('_ADFIngestPipelineRunID'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Insert-IngestInstance",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set-DestinationRawFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[InsertIngestInstance]",
							"storedProcedureParameters": {
								"ADFPipelineRunID": {
									"value": {
										"value": "@variables('_ADFIngestPipelineRunID')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"DestinationRawFile": {
									"value": {
										"value": "@variables('_DestinationRawFile')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DestinationRawFileSystem": {
									"value": {
										"value": "@pipeline().parameters.DestinationRawFileSystem",
										"type": "Expression"
									},
									"type": "String"
								},
								"DestinationRawFolder": {
									"value": {
										"value": "@pipeline().parameters.DestinationRawFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"IngestID": {
									"value": {
										"value": "@pipeline().parameters.IngestID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ReloadFlag": {
									"value": {
										"value": "@pipeline().parameters.ReloadFlag",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-Success-IngestInstance",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-RawZone",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get-Stats",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestInstance]",
							"storedProcedureParameters": {
								"ADFIngestPipelineRunID": {
									"value": {
										"value": "@variables('_ADFIngestPipelineRunID')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"DataFromTimestamp": {
									"value": {
										"value": "@pipeline().parameters.DataFromTimestamp",
										"type": "Expression"
									},
									"type": "Datetimeoffset"
								},
								"DataToTimestamp": {
									"value": {
										"value": "@if(equals(activity('Get-Stats').output.firstRow.DATATOTIMESTAMP, NULL),pipeline().parameters.DataToTimestamp,activity('Get-Stats').output.firstRow.DATATOTIMESTAMP)",
										"type": "Expression"
									},
									"type": "Datetimeoffset"
								},
								"IngestCount": {
									"value": {
										"value": "@activity('Copy-RawZone').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"IngestStatus": {
									"value": "Success",
									"type": "String"
								},
								"ReloadFlag": {
									"value": {
										"value": "@if(equals(pipeline().parameters.ReloadFlag,true),1,0)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SourceCount": {
									"value": {
										"value": "@activity('Get-Stats').output.firstRow.SourceCount",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-Failure-IngestInstance",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-RawZone",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Get-Stats",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestInstance]",
							"storedProcedureParameters": {
								"ADFIngestPipelineRunID": {
									"value": {
										"value": "@variables('_ADFIngestPipelineRunID')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"DataFromTimestamp": {
									"value": {
										"value": "@pipeline().parameters.DataFromTimestamp",
										"type": "Expression"
									},
									"type": "Datetimeoffset"
								},
								"DataToTimestamp": {
									"value": null,
									"type": "Datetimeoffset"
								},
								"IngestStatus": {
									"value": "Failure",
									"type": "String"
								},
								"ReloadFlag": {
									"value": {
										"value": "@if(equals(pipeline().parameters.ReloadFlag,true),1,0)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-Failure-IngestDefinition",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update-Failure-IngestInstance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestDefinition]",
							"storedProcedureParameters": {
								"IngestID": {
									"value": {
										"value": "@pipeline().parameters.IngestID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"IngestStatus": {
									"value": "Failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get-TransformDefinition-L1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update-Success-IngestDefinition",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformDefinition_L1]",
								"storedProcedureParameters": {
									"WatermarkDate": {
										"type": "Datetimeoffset",
										"value": {
											"value": "@pipeline().parameters.DataFromTimestamp",
											"type": "Expression"
										}
									},
									"IngestID": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.IngestID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Insert-TransformInstance-L1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-TransformDefinition-L1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-TransformDefinition-L1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Insert-TransformInstance-StoredProc",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ELT].[InsertTransformInstance_L1]",
										"storedProcedureParameters": {
											"IngestADFPipelineRunID": {
												"value": {
													"value": "@variables('_ADFIngestPipelineRunID')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"IngestCount": {
												"value": {
													"value": "@activity('Copy-RawZone').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"IngestID": {
												"value": {
													"value": "@item().IngestID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"InputRawFile": {
												"value": {
													"value": "@variables('_DestinationRawFile')",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputRawFileFolder": {
												"value": {
													"value": "@pipeline().parameters.DestinationRawFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputRawFileSystem": {
												"value": {
													"value": "@pipeline().parameters.DestinationRawFileSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"L1TransformID": {
												"value": {
													"value": "@item().L1TransformID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"NotebookName": {
												"value": {
													"value": "@item().NotebookName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NotebookPath": {
												"value": {
													"value": "@item().NotebookPath",
													"type": "Expression"
												},
												"type": "String"
											},
											"LookupColumns": {
												"value": {
													"value": "@item().LookupColumns",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityName": {
												"value": {
													"value": "@item().OutputEntityName",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityWriteMode": {
												"value": {
													"value": "@item().OutputEntityWriteMode",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityFolder": {
												"value": {
													"value": "@item().OutputEntityFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityFileSystem": {
												"value": {
													"value": "@item().OutputEntityFileSystem",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Copy-RawZone",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Insert-IngestInstance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": {
									"value": "@pipeline().parameters.SourceQuery",
									"type": "Expression"
								},
								"queryTimeout": "00:10:00",
								"noTruncation": false
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "ADX_Table",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.EntityName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Bronze_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": {
										"value": "@pipeline().parameters.DestinationRawFileSystem",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.DestinationRawFolder",
										"type": "Expression"
									},
									"File": {
										"value": "@variables('_DestinationRawFile')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set-ADFIngestPipelineRunID",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_ADFIngestPipelineRunID",
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Update-Success-IngestDefinition",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update-Success-IngestInstance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestDefinition]",
							"storedProcedureParameters": {
								"IngestID": {
									"value": {
										"value": "@pipeline().parameters.IngestID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"LastWatermarkDate": {
									"value": {
										"value": "@if(equals(activity('Get-Stats').output.firstRow.DATATOTIMESTAMP, NULL),pipeline().parameters.DataToTimestamp,activity('Get-Stats').output.firstRow.DATATOTIMESTAMP)",
										"type": "Expression"
									},
									"type": "Datetimeoffset"
								},
								"IngestStatus": {
									"value": "Success",
									"type": "String"
								},
								"ReloadFlag": {
									"value": {
										"value": "@if(equals(pipeline().parameters.ReloadFlag,true),1,0)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get-Stats",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert-IngestInstance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": {
									"value": "@pipeline().parameters.StatQuery",
									"type": "Expression"
								},
								"queryTimeout": "00:10:00",
								"noTruncation": false
							},
							"dataset": {
								"referenceName": "ADX_Table",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.EntityName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Get-TransformDefinition-L2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert-TransformInstance-L1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformDefinition_L2]",
								"storedProcedureParameters": {
									"WatermarkDate": {
										"type": "DateTime",
										"value": null
									},
									"IngestID": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.IngestID",
											"type": "Expression"
										}
									},
									"InputType": {
										"type": "String",
										"value": "Raw"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach-TransformDefinition-L2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-TransformDefinition-L2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-TransformDefinition-L2').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Insert-TransformInstance-L2",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ELT].[InsertTransformInstance_L2]",
										"storedProcedureParameters": {
											"L2TransformID": {
												"value": {
													"value": "@item().L2TransformID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"L1TransformID": {
												"value": {
													"value": "@item().L1TransformID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"NotebookName": {
												"value": {
													"value": "@item().NotebookName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NotebookPath": {
												"value": {
													"value": "@item().NotebookPath",
													"type": "Expression"
												},
												"type": "String"
											},
											"CustomParameters": {
												"value": {
													"value": "@item().CustomParameters",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputType": {
												"value": {
													"value": "@item().InputType",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataFromTimestamp": {
												"value": {
													"value": "@item().DataFromTimestamp",
													"type": "Expression"
												},
												"type": "Datetimeoffset"
											},
											"DataToTimestamp": {
												"value": {
													"value": "@item().DataToTimestamp",
													"type": "Expression"
												},
												"type": "Datetimeoffset"
											},
											"DataFromNumber": {
												"value": {
													"value": "@item().DataFromNumber",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DataToNumber": {
												"value": {
													"value": "@item().DataToNumber",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"MaxIntervalMinutes": {
												"value": {
													"value": "@item().MaxIntervalMinutes",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"MaxIntervalNumber": {
												"value": {
													"value": "@item().MaxIntervalNumber",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"MaxRetries": {
												"value": {
													"value": "@item().MaxRetries",
													"type": "Expression"
												},
												"type": "Int16"
											},
											"OutputL2CurateFileSystem": {
												"value": {
													"value": "@item().OutputL2CurateFileSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFolder": {
												"value": {
													"value": "@item().OutputL2CuratedFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFile": {
												"value": {
													"value": "@item().OutputL2CuratedFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFileDelimiter": {
												"value": {
													"value": "@item().OutputL2CuratedFileDelimiter",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFileFormat": {
												"value": {
													"value": "@item().OutputL2CuratedFileFormat",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFileWriteMode": {
												"value": {
													"value": "@item().OutputL2CuratedFileWriteMode",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityName": {
												"value": {
													"value": "@item().OutputEntityName",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityFileSystem": {
												"value": {
													"value": "@item().OutputEntityFileSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityFolder": {
												"value": {
													"value": "@item().OutputEntityFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityWriteMode": {
												"value": {
													"value": "@item().OutputEntityWriteMode",
													"type": "Expression"
												},
												"type": "String"
											},
											"LookupColumns": {
												"value": {
													"value": "@item().LookupColumns",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"IngestID": {
						"type": "string",
						"defaultValue": "4"
					},
					"SourceSystemName": {
						"type": "string",
						"defaultValue": "Adventureworks"
					},
					"StreamName": {
						"type": "string",
						"defaultValue": "Person Address"
					},
					"EntityName": {
						"type": "string",
						"defaultValue": "Person.Address"
					},
					"DataFromTimestamp": {
						"type": "string",
						"defaultValue": "1900-01-01 00:00:00.0000000"
					},
					"DataToTimestamp": {
						"type": "string",
						"defaultValue": "2022-10-23 13:16:16.0000000"
					},
					"RunSequence": {
						"type": "string",
						"defaultValue": "100"
					},
					"L1TransformationReqdFlag": {
						"type": "bool",
						"defaultValue": true
					},
					"L2TransformationReqdFlag": {
						"type": "bool",
						"defaultValue": true
					},
					"DestinationRawFileSystem": {
						"type": "string",
						"defaultValue": "raw-bronze"
					},
					"DestinationRawFolder": {
						"type": "string",
						"defaultValue": "adventureworks/personaddress/1900-01"
					},
					"DestinationRawFile": {
						"type": "string",
						"defaultValue": "person_address_19000101_GUID.parquet"
					},
					"SourceQuery": {
						"type": "string",
						"defaultValue": "SELECT * FROM Person.Address WHERE ModifiedDate > '1900-01-01 00:00:00.000' AND ModifiedDate<='2022-10-23 13:16:16'"
					},
					"StatQuery": {
						"type": "string",
						"defaultValue": "SELECT MIN(ModifiedDate) AS DataFromTimestamp, MAX(ModifiedDate) AS DataToTimestamp, count(1) as SourceCount FROM Person.Address WHERE ModifiedDate > '1900-01-01 00:00:00.000' AND ModifiedDate <= '2022-10-23 13:16:16'"
					},
					"ReloadFlag": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"_ADFIngestPipelineRunID": {
						"type": "String"
					},
					"_DestinationRawFile": {
						"type": "String"
					},
					"_StatFileFolder": {
						"type": "String"
					},
					"_StatFile": {
						"type": "String"
					},
					"_StatFileSystem": {
						"type": "String"
					},
					"_DataFromTimestamp": {
						"type": "String"
					},
					"_DataToTimestamp": {
						"type": "String"
					},
					"_SourceCount": {
						"type": "String"
					},
					"_MaxDeltaDate": {
						"type": "String"
					},
					"_SchemaName": {
						"type": "String"
					},
					"_TableName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileDrop-Ingest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Insert-IngestInstance",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set-ADFIngestPipelineRunID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[InsertIngestInstance]",
							"storedProcedureParameters": {
								"ADFPipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"DestinationRawFile": {
									"value": {
										"value": "@pipeline().parameters.SourceFileDropFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"DestinationRawFileSystem": {
									"value": {
										"value": "@pipeline().parameters.DestinationRawFileSystem",
										"type": "Expression"
									},
									"type": "String"
								},
								"DestinationRawFolder": {
									"value": {
										"value": "@pipeline().parameters.DestinationRawFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"IngestID": {
									"value": {
										"value": "@pipeline().parameters.IngestID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ReloadFlag": {
									"value": {
										"value": "@pipeline().parameters.ReloadFlag",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"SourceFileDropFile": {
									"value": {
										"value": "@pipeline().parameters.SourceFileDropFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceFileDropFileSystem": {
									"value": {
										"value": "@pipeline().parameters.SourceFileDropFileSystem",
										"type": "Expression"
									},
									"type": "String"
								},
								"SourceFileDropFolder": {
									"value": {
										"value": "@pipeline().parameters.SourceFileDropFolder",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get-TransformDefinition-L1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update-Success-IngestDefinition-TXT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformDefinition_L1]",
								"storedProcedureParameters": {
									"WatermarkDate": {
										"type": "DateTime",
										"value": null
									},
									"IngestID": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.IngestID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get-TransformDefinition-L2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach-TransformDefinition-L1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformDefinition_L2]",
								"storedProcedureParameters": {
									"WatermarkDate": {
										"type": "DateTime",
										"value": null
									},
									"IngestID": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.IngestID",
											"type": "Expression"
										}
									},
									"InputType": {
										"type": "String",
										"value": "Raw"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set-ADFIngestPipelineRunID",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_ADFIngestPipelineRunID",
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach-TransformDefinition-L1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-TransformDefinition-L1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-TransformDefinition-L1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "InsertTransformInstance_L1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ELT].[InsertTransformInstance_L1]",
										"storedProcedureParameters": {
											"IngestADFPipelineRunID": {
												"value": {
													"value": "@variables('_ADFIngestPipelineRunID')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"IngestID": {
												"value": {
													"value": "@item().IngestID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"IngestInstanceID": {
												"value": null,
												"type": "Int32"
											},
											"InputFileHeaderFlag": {
												"value": {
													"value": "@item().InputFileHeaderFlag",
													"type": "Expression"
												},
												"type": "Boolean"
											},
											"InputRawFile": {
												"value": {
													"value": "@pipeline().parameters.SourceFileDropFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputRawFileDelimiter": {
												"value": {
													"value": "@item().InputRawFileDelimiter",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputRawFileFolder": {
												"value": {
													"value": "@pipeline().parameters.DestinationRawFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputRawFileSystem": {
												"value": {
													"value": "@pipeline().parameters.DestinationRawFileSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"L1TransformID": {
												"value": {
													"value": "@item().L1TransformID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"LookupColumns": {
												"value": {
													"value": "@item().LookupColumns",
													"type": "Expression"
												},
												"type": "String"
											},
											"NotebookName": {
												"value": {
													"value": "@item().NotebookName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NotebookPath": {
												"value": {
													"value": "@item().NotebookPath",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityName": {
												"value": {
													"value": "@item().OutputEntityName",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityWriteMode": {
												"value": {
													"value": "@item().OutputEntityWriteMode",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityFolder": {
												"value": {
													"value": "@item().OutputEntityFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityFileSystem": {
												"value": {
													"value": "@item().OutputEntityFileSystem",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ForEach-TransformDefinition-L2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-TransformDefinition-L2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-TransformDefinition-L2').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Insert-TransformInstance-L2",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ELT].[InsertTransformInstance_L2]",
										"storedProcedureParameters": {
											"L2TransformID": {
												"value": {
													"value": "@item().L2TransformID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"L1TransformID": {
												"value": {
													"value": "@item().L1TransformID",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"NotebookName": {
												"value": {
													"value": "@item().NotebookName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NotebookPath": {
												"value": {
													"value": "@item().NotebookPath",
													"type": "Expression"
												},
												"type": "String"
											},
											"CustomParameters": {
												"value": {
													"value": "@item().CustomParameters",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputType": {
												"value": {
													"value": "@item().InputType",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataFromTimestamp": {
												"value": {
													"value": "@item().DataFromTimestamp",
													"type": "Expression"
												},
												"type": "Datetimeoffset"
											},
											"DataToTimestamp": {
												"value": {
													"value": "@item().DataToTimestamp",
													"type": "Expression"
												},
												"type": "Datetimeoffset"
											},
											"DataFromNumber": {
												"value": {
													"value": "@item().DataFromNumber",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"DataToNumber": {
												"value": {
													"value": "@item().DataToNumber",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"MaxIntervalMinutes": {
												"value": {
													"value": "@item().MaxIntervalMinutes",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"MaxIntervalNumber": {
												"value": {
													"value": "@item().MaxIntervalNumber",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"MaxRetries": {
												"value": {
													"value": "@item().MaxRetries",
													"type": "Expression"
												},
												"type": "Int16"
											},
											"OutputL2CurateFileSystem": {
												"value": {
													"value": "@item().OutputL2CurateFileSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFolder": {
												"value": {
													"value": "@item().OutputL2CuratedFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFile": {
												"value": {
													"value": "@item().OutputL2CuratedFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFileDelimiter": {
												"value": {
													"value": "@item().OutputL2CuratedFileDelimiter",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFileFormat": {
												"value": {
													"value": "@item().OutputL2CuratedFileFormat",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFileWriteMode": {
												"value": {
													"value": "@item().OutputL2CuratedFileWriteMode",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityName": {
												"value": {
													"value": "@item().OutputEntityName",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityFileSystem": {
												"value": {
													"value": "@item().OutputEntityFileSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityFolder": {
												"value": {
													"value": "@item().OutputEntityFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityWriteMode": {
												"value": {
													"value": "@item().OutputEntityWriteMode",
													"type": "Expression"
												},
												"type": "String"
											},
											"LookupColumns": {
												"value": {
													"value": "@item().LookupColumns",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Copy-DropZone-RawZone",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Insert-IngestInstance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DropZone_Binary",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": {
										"value": "@pipeline().parameters.SourceFileDropFileSystem",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.SourceFileDropFolder",
										"type": "Expression"
									},
									"File": {
										"value": "@pipeline().parameters.SourceFileDropFile",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Bronze_Binary",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": {
										"value": "@pipeline().parameters.DestinationRawFileSystem",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.DestinationRawFolder",
										"type": "Expression"
									},
									"File": {
										"value": "@pipeline().parameters.SourceFileDropFile",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Update-Success-IngestInstance-TXT",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-DropZone-RawZone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestInstance]",
							"storedProcedureParameters": {
								"ADFIngestPipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IngestStatus": {
									"value": "Success",
									"type": "String"
								},
								"ReloadFlag": {
									"value": {
										"value": "@if(equals(pipeline().parameters.ReloadFlag,true),1,0)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-Failure-IngestInstance-TXT",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-DropZone-RawZone",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestInstance]",
							"storedProcedureParameters": {
								"ADFIngestPipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"IngestStatus": {
									"value": "Failure",
									"type": "String"
								},
								"ReloadFlag": {
									"value": {
										"value": "@if(equals(pipeline().parameters.ReloadFlag,true),1,0)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-Success-IngestDefinition-TXT",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update-Success-IngestInstance-TXT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestDefinition]",
							"storedProcedureParameters": {
								"IngestID": {
									"value": {
										"value": "@pipeline().parameters.IngestID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"IngestStatus": {
									"value": "Success",
									"type": "String"
								},
								"ReloadFlag": {
									"value": {
										"value": "@pipeline().parameters.ReloadFlag",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-Failure-IngestDefinition-TXT",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update-Failure-IngestInstance-TXT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestDefinition]",
							"storedProcedureParameters": {
								"IngestID": {
									"value": {
										"value": "@pipeline().parameters.IngestID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"IngestStatus": {
									"value": "Failure",
									"type": "String"
								},
								"ReloadFlag": {
									"value": {
										"value": "@pipeline().parameters.ReloadFlag",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"IngestID": {
						"type": "int"
					},
					"SourceSystemName": {
						"type": "string"
					},
					"StreamName": {
						"type": "string"
					},
					"SourceFileDropFileSystem": {
						"type": "string"
					},
					"SourceFileDropFolder": {
						"type": "string"
					},
					"SourceFileDropFile": {
						"type": "string"
					},
					"DestinationRawFileSystem": {
						"type": "string"
					},
					"DestinationRawFolder": {
						"type": "string"
					},
					"DestinationRawFile": {
						"type": "string"
					},
					"ReloadFlag": {
						"type": "bool"
					},
					"L1TransformationReqdFlag": {
						"type": "bool"
					},
					"L2TransformationReqdFlag": {
						"type": "bool"
					},
					"DataFormat": {
						"type": "string"
					},
					"SourceFileDelimiter": {
						"type": "string"
					},
					"SourceFileHeaderFlag": {
						"type": "bool"
					},
					"DataMapping": {
						"type": "string"
					}
				},
				"variables": {
					"_DestinationRawFile": {
						"type": "String"
					},
					"_ADFIngestPipelineRunID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "File Drop"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Generic-L1-Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GenericL1TransformNotebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Update-L1-TransformInstance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 31,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/', pipeline().parameters.NotebookPath, '/', pipeline().parameters.NotebookName)",
								"type": "Expression"
							},
							"baseParameters": {
								"NotebookParameters": {
									"value": "@pipeline().parameters.NotebookParameters",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Databricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-L1-TransformInstance-Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "GenericL1TransformNotebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateTransformInstance_L1]",
							"storedProcedureParameters": {
								"IngestCount": {
									"value": null,
									"type": "Int32"
								},
								"L1TransformADFPipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"L1TransformCount": {
									"value": null,
									"type": "Int32"
								},
								"L1TransformInstanceId": {
									"value": {
										"value": "@pipeline().parameters.L1TransformInstanceID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"L1TransformStatus": {
									"value": "Failure",
									"type": "String"
								},
								"MaxRetries": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-L1-TransformInstance-Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "GenericL1TransformNotebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateTransformInstance_L1]",
							"storedProcedureParameters": {
								"IngestCount": {
									"value": {
										"value": "@activity('GenericL1TransformNotebook').output.runOutput.sourceCount",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"L1TransformADFPipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"L1TransformCount": {
									"value": {
										"value": "@activity('GenericL1TransformNotebook').output.runOutput.l1TransformCount",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"L1TransformInstanceId": {
									"value": {
										"value": "@pipeline().parameters.L1TransformInstanceID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"L1TransformStatus": {
									"value": "Success",
									"type": "String"
								},
								"MaxRetries": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-L1-TransformInstance",
						"description": "Update",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateTransformInstance_L1]",
							"storedProcedureParameters": {
								"IngestCount": {
									"value": null,
									"type": "Int32"
								},
								"L1TransformADFPipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"L1TransformCount": {
									"value": null,
									"type": "Int32"
								},
								"L1TransformInstanceId": {
									"value": {
										"value": "@pipeline().parameters.L1TransformInstanceID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"L1TransformStatus": {
									"value": "Running",
									"type": "String"
								},
								"MaxRetries": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get-TransformDefinition-L2-DeltaLake",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update-L1-TransformInstance-Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformDefinition_L2]",
								"storedProcedureParameters": {
									"WatermarkDate": {
										"type": "DateTime",
										"value": null
									},
									"IngestID": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.IngestID",
											"type": "Expression"
										}
									},
									"InputType": {
										"type": "String",
										"value": "DeltaLake"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach-TransformDefinition-L2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-TransformDefinition-L2-DeltaLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-TransformDefinition-L2-DeltaLake').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Insert-TransformInstance-L2",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ELT].[InsertTransformInstance_L2]",
										"storedProcedureParameters": {
											"DataFromNumber": {
												"value": {
													"value": "@item().DataFromNumber",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"DataFromTimestamp": {
												"value": {
													"value": "@item().DataFromTimestamp",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"DataToNumber": {
												"value": {
													"value": "@item().DataToNumber",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"DataToTimestamp": {
												"value": {
													"value": "@item().DataFromTimestamp",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"IngestADFPipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"IngestID": {
												"value": {
													"value": "@item().IngestID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"InputEntityName": {
												"value": {
													"value": "@item().InputEntityName",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputFile": {
												"value": {
													"value": "@item().InputFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputFileDelimiter": {
												"value": {
													"value": "@item().InputFileDelimiter",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputFileFolder": {
												"value": {
													"value": "@item().InputFileFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputFileHeaderFlag": {
												"value": {
													"value": "@item().InputFileHeaderFlag",
													"type": "Expression"
												},
												"type": "Boolean"
											},
											"InputFileSystem": {
												"value": {
													"value": "@item().InputFileSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"L1TransformID": {
												"value": {
													"value": "@item().L1TransformID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"L2TransformID": {
												"value": {
													"value": "@item().L2TransformID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"LookupColumns": {
												"value": {
													"value": "@item().LookupColumns",
													"type": "Expression"
												},
												"type": "String"
											},
											"MaxRetries": {
												"value": {
													"value": "@item().MaxRetries",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"NotebookName": {
												"value": {
													"value": "@item().NotebookName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NotebookPath": {
												"value": {
													"value": "@item().NotebookPath",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityFileSystem": {
												"value": {
													"value": "@item().OutputEntityFileSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityFolder": {
												"value": {
													"value": "@item().OutputEntityFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityName": {
												"value": {
													"value": "@item().OutputEntityName",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityWriteMode": {
												"value": {
													"value": "@item().OutputEntityWriteMode",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFile": {
												"value": {
													"value": "@item().OutputL2CuratedFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFileDelimiter": {
												"value": {
													"value": "@item().OutputL2CuratedFileDelimiter",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFileFormat": {
												"value": {
													"value": "@item().OutputL2CuratedFileFormat",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFileWriteMode": {
												"value": {
													"value": "@item().OutputL2CuratedFileWriteMode",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFolder": {
												"value": {
													"value": "@item().OutputL2CuratedFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CurateFileSystem": {
												"value": {
													"value": "@item().OutputL2CurateFileSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"WatermarkName": {
												"value": {
													"value": "@item().WatermarkName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"L1TransformInstanceID": {
						"type": "int",
						"defaultValue": 188
					},
					"L1TransformID": {
						"type": "string",
						"defaultValue": "446"
					},
					"IngestID": {
						"type": "int",
						"defaultValue": 214
					},
					"NotebookParameters": {
						"type": "string"
					},
					"NotebookName": {
						"type": "string"
					},
					"NotebookPath": {
						"type": "string"
					},
					"MaxRetries": {
						"type": "int"
					}
				},
				"folder": {
					"name": "Transform Pipelines/L1Transform"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Generic-L2-Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GenericL2TransformNotebook",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Update-L2-TransformInstance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": {
								"value": "@concat('/', pipeline().parameters.NotebookPath, '/', pipeline().parameters.NotebookName)",
								"type": "Expression"
							},
							"baseParameters": {
								"L2TransformInstanceID": {
									"value": "@string(pipeline().parameters.L2TransformInstanceID)",
									"type": "Expression"
								},
								"NotebookParameters": {
									"value": "@pipeline().parameters.NotebookParameters",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Databricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-L2-TransformInstance-Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "GenericL2TransformNotebook",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateTransformInstance_L2]",
							"storedProcedureParameters": {
								"L2TransformADFPipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"L2TransformInstanceId": {
									"value": {
										"value": "@pipeline().parameters.L2TransformInstanceID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"L2TransformStatus": {
									"value": "Failure",
									"type": "String"
								},
								"MaxRetries": {
									"value": {
										"value": "@pipeline().parameters.MaxRetries",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-L2-TransformInstance-Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "GenericL2TransformNotebook",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateTransformInstance_L2]",
							"storedProcedureParameters": {
								"DataFromNumber": {
									"value": {
										"value": "@pipeline().parameters.DataFromNumber",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"DataFromTimestamp": {
									"value": {
										"value": "@pipeline().parameters.DataFromTimestamp",
										"type": "Expression"
									},
									"type": "Datetimeoffset"
								},
								"DataToNumber": {
									"value": {
										"value": "@pipeline().parameters.DataToNumber",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"DataToTimestamp": {
									"value": {
										"value": "@pipeline().parameters.DataToTimestamp",
										"type": "Expression"
									},
									"type": "Datetimeoffset"
								},
								"L2TransformADFPipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"L2TransformCount": {
									"value": {
										"value": "@activity('GenericL2TransformNotebook').output.runOutput.l2TransformCount",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"L2TransformInstanceId": {
									"value": {
										"value": "@pipeline().parameters.L2TransformInstanceID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"L2TransformStatus": {
									"value": "Success",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-L2-TransformInstance",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateTransformInstance_L2]",
							"storedProcedureParameters": {
								"L2TransformADFPipelineRunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"L2TransformInstanceId": {
									"value": {
										"value": "@pipeline().parameters.L2TransformInstanceID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"L2TransformStatus": {
									"value": "Running",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-L2-TransformDefinition-Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update-L2-TransformInstance-Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateTransformDefinition_L2]",
							"storedProcedureParameters": {
								"L2TransformID": {
									"value": {
										"value": "@pipeline().parameters.L2TransformID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"LastWatermarkDate": {
									"value": {
										"value": "@pipeline().parameters.DataToTimestamp",
										"type": "Expression"
									},
									"type": "Datetimeoffset"
								},
								"LastWatermarkNumber": {
									"value": {
										"value": "@pipeline().parameters.DataToNumber",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-L2-TransformDefinition-Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update-L2-TransformInstance-Failure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateTransformDefinition_L2]",
							"storedProcedureParameters": {
								"L2TransformID": {
									"value": {
										"value": "@pipeline().parameters.L2TransformID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"LastWatermarkDate": {
									"value": {
										"value": "@pipeline().parameters.DataFromTimestamp",
										"type": "Expression"
									},
									"type": "Datetimeoffset"
								},
								"LastWatermarkNumber": {
									"value": {
										"value": "@pipeline().parameters.DataFromNumber",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"L2TransformInstanceID": {
						"type": "int"
					},
					"L2TransformID": {
						"type": "string"
					},
					"IngestID": {
						"type": "int"
					},
					"L1TransformID": {
						"type": "int"
					},
					"NotebookName": {
						"type": "string"
					},
					"NotebookPath": {
						"type": "string"
					},
					"ReRunL2TransformFlag": {
						"type": "bool"
					},
					"MaxRetries": {
						"type": "int"
					},
					"NotebookParameters": {
						"type": "string"
					},
					"DataFromNumber": {
						"type": "string"
					},
					"DataToNumber": {
						"type": "string"
					},
					"DataFromTimestamp": {
						"type": "string"
					},
					"DataToTimestamp": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Transform Pipelines/L2Transform"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/REST_API')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestAnonymous",
					"type": "LinkedServiceReference",
					"parameters": {
						"KeyVaultBaseURL": {
							"value": "@dataset().BaseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"BaseURL": {
						"type": "string"
					},
					"ServicePrincipalID": {
						"type": "string"
					},
					"TenantID": {
						"type": "string"
					},
					"AADResource": {
						"type": "string"
					},
					"RelativeURL": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Azure/REST"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().RelativeURL",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/REST_Json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestAnonymous",
					"type": "LinkedServiceReference",
					"parameters": {
						"KeyVaultBaseURL": {
							"value": "@dataset().KeyVaultSecretBaseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"EntityName": {
						"type": "string"
					},
					"KeyVaultSecretBaseURL": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Azure/REST"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().EntityName",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLServer_Table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL Server",
					"type": "LinkedServiceReference",
					"parameters": {
						"KeyVaultConnString": {
							"value": "@dataset().SQLServerConnectionString",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"SQLServerConnectionString": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Azure/Databases"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Salesforce_Dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Salesforce",
					"type": "LinkedServiceReference",
					"parameters": {
						"EnvironmentUrl": {
							"value": "@dataset().KeyVaultEnvironmentURL",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().KeyVaultUserName",
							"type": "Expression"
						},
						"Password": {
							"value": "@dataset().KeyVaultPassword",
							"type": "Expression"
						},
						"SecurityToken": {
							"value": "@dataset().KeyVaultSecurityToken",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ObjectName": {
						"type": "string"
					},
					"KeyVaultEnvironmentURL": {
						"type": "string"
					},
					"KeyVaultUserName": {
						"type": "string"
					},
					"KeyVaultPassword": {
						"type": "string"
					},
					"KeyVaultSecurityToken": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Azure/Cloud"
				},
				"annotations": [],
				"type": "SalesforceObject",
				"schema": [],
				"typeProperties": {
					"objectApiName": {
						"value": "@dataset().ObjectName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Salesforce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADX-Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get-IngestInstances",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetIngestDefinition]",
								"storedProcedureParameters": {
									"MaxIngestInstance": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.MaxIngestInstance",
											"type": "Expression"
										}
									},
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Ingest-Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-IngestInstances",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-IngestInstances').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Salesforce-Ingest",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ADX-Ingest",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"IngestID": {
												"value": "@item().IngestID",
												"type": "Expression"
											},
											"SourceSystemName": {
												"value": "@item().SourceSystemName",
												"type": "Expression"
											},
											"StreamName": {
												"value": "@item().StreamName",
												"type": "Expression"
											},
											"EntityName": {
												"value": "@item().EntityName",
												"type": "Expression"
											},
											"DataFromTimestamp": {
												"value": "@item().DataFromTimestamp",
												"type": "Expression"
											},
											"DataToTimestamp": {
												"value": "@item().DataToTimestamp",
												"type": "Expression"
											},
											"RunSequence": {
												"value": "@item().RunSequence",
												"type": "Expression"
											},
											"L1TransformationReqdFlag": {
												"value": "@item().L1TransformationReqdFlag",
												"type": "Expression"
											},
											"L2TransformationReqdFlag": {
												"value": "@item().L2TransformationReqdFlag",
												"type": "Expression"
											},
											"DestinationRawFileSystem": {
												"value": "@item().DestinationRawFileSystem",
												"type": "Expression"
											},
											"DestinationRawFolder": {
												"value": "@item().DestinationRawFolder",
												"type": "Expression"
											},
											"DestinationRawFile": {
												"value": "@item().DestinationRawFile",
												"type": "Expression"
											},
											"SourceQuery": {
												"value": "@item().SourceQuery",
												"type": "Expression"
											},
											"StatQuery": {
												"value": "@item().StatQuery",
												"type": "Expression"
											},
											"ReloadFlag": {
												"value": "@item().ReloadFlag",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get-L1-Transform",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Ingest-Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L1]",
								"storedProcedureParameters": {
									"DelayL1TransformationFlag": {
										"type": "Int32",
										"value": "0"
									},
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "L1-Transform",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-L1-Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-L1-Transform').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check-L1-Instance-Status",
									"description": "Check the current L1 Instance is not running or completed.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L1]",
											"storedProcedureParameters": {
												"L1TransformInstanceId": {
													"type": "Int32",
													"value": {
														"value": "@item().L1TransformInstanceID",
														"type": "Expression"
													}
												},
												"SourceSystemName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.SourceSystemName",
														"type": "Expression"
													}
												},
												"StreamName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.StreamName",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If-L1-Transform-Pipeline",
									"description": "If Lookup returns a row continue",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-L1-Instance-Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Check-L1-Instance-Status').output?.firstRow, null)) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Generic-L1Transform",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Generic-L1-Transform",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"L1TransformInstanceID": {
															"value": "@item().L1TransformInstanceID",
															"type": "Expression"
														},
														"L1TransformID": {
															"value": "@item().L1TransformID",
															"type": "Expression"
														},
														"IngestID": {
															"value": "@item().IngestID",
															"type": "Expression"
														},
														"NotebookParameters": {
															"value": "@item().NotebookParameters",
															"type": "Expression"
														},
														"NotebookName": {
															"value": "@item().NotebookName",
															"type": "Expression"
														},
														"NotebookPath": {
															"value": "@item().NotebookPath",
															"type": "Expression"
														},
														"MaxRetries": {
															"value": "@item().MaxRetries",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Get-L2-Transform-DeltaLake",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "L1-Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
								"storedProcedureParameters": {
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									},
									"DelayL2TransformationFlag": {
										"type": "Int16",
										"value": "0"
									},
									"InputType": {
										"type": "String",
										"value": "DeltaLake"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "L2-Transform-DeltaLake",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-L2-Transform-DeltaLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-L2-Transform-DeltaLake').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check-L2-Instance-Status-DeltaLake",
									"description": "Check the current L2 Instance is not running or completed.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
											"storedProcedureParameters": {
												"L2TransformInstanceId": {
													"type": "Int32",
													"value": {
														"value": "@item().L2TransformInstanceID",
														"type": "Expression"
													}
												},
												"SourceSystemName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.SourceSystemName",
														"type": "Expression"
													}
												},
												"StreamName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.StreamName",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If-L2-Transform-Pipeline-DeltaLake",
									"description": "If Lookup returns a row continue",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-L2-Instance-Status-DeltaLake",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Check-L2-Instance-Status-DeltaLake').output?.firstRow, null)) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Generic-L2Transform-DW",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Generic-L2-Transform",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"L2TransformInstanceID": {
															"value": "@item().L2TransformInstanceID",
															"type": "Expression"
														},
														"L2TransformID": {
															"value": "@item().L2TransformID",
															"type": "Expression"
														},
														"IngestID": {
															"value": "@item().IngestID",
															"type": "Expression"
														},
														"L1TransformID": {
															"value": "@item().L1TransformID",
															"type": "Expression"
														},
														"NotebookName": {
															"value": "@item().NotebookName",
															"type": "Expression"
														},
														"NotebookPath": {
															"value": "@item().NotebookPath",
															"type": "Expression"
														},
														"ReRunL2TransformFlag": {
															"value": "@item().ReRunL2TransformFlag",
															"type": "Expression"
														},
														"MaxRetries": {
															"value": "@item().MaxRetries",
															"type": "Expression"
														},
														"NotebookParameters": {
															"value": "@item().NotebookParameters",
															"type": "Expression"
														},
														"DataFromNumber": {
															"value": "@item().DataFromNumber",
															"type": "Expression"
														},
														"DataToNumber": {
															"value": "@item().DataToNumber",
															"type": "Expression"
														},
														"DataFromTimestamp": {
															"value": "@item().DataFromTimestamp",
															"type": "Expression"
														},
														"DataToTimestamp": {
															"value": "@item().DataToTimestamp",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Get-L2-Transform-Raw",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Ingest-Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
								"storedProcedureParameters": {
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									},
									"DelayL2TransformationFlag": {
										"type": "Int16",
										"value": "0"
									},
									"InputType": {
										"type": "String",
										"value": "Raw"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "L2-Transform-DeltaLake_Raw",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-L2-Transform-Raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-L2-Transform-Raw').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check-L2-Instance-Status-Raw",
									"description": "Check the current L2 Instance is not running or completed.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
											"storedProcedureParameters": {
												"L2TransformInstanceId": {
													"type": "Int32",
													"value": {
														"value": "@item().L2TransformInstanceID",
														"type": "Expression"
													}
												},
												"SourceSystemName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.SourceSystemName",
														"type": "Expression"
													}
												},
												"StreamName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.StreamName",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If-L2-Transform-Pipeline-DeltaLake_copy1",
									"description": "If Lookup returns a row continue",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-L2-Instance-Status-Raw",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Check-L2-Instance-Status-Raw').output?.firstRow, null)) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Generic-L2Transform-DW_copy1",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Generic-L2-Transform",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"L2TransformInstanceID": {
															"value": "@item().L2TransformInstanceID",
															"type": "Expression"
														},
														"L2TransformID": {
															"value": "@item().L2TransformID",
															"type": "Expression"
														},
														"IngestID": {
															"value": "@item().IngestID",
															"type": "Expression"
														},
														"L1TransformID": {
															"value": "@item().L1TransformID",
															"type": "Expression"
														},
														"NotebookName": {
															"value": "@item().NotebookName",
															"type": "Expression"
														},
														"NotebookPath": {
															"value": "@item().NotebookPath",
															"type": "Expression"
														},
														"ReRunL2TransformFlag": {
															"value": "@item().ReRunL2TransformFlag",
															"type": "Expression"
														},
														"MaxRetries": {
															"value": "@item().MaxRetries",
															"type": "Expression"
														},
														"NotebookParameters": {
															"value": "@item().NotebookParameters",
															"type": "Expression"
														},
														"DataFromNumber": {
															"value": "@item().DataFromNumber",
															"type": "Expression"
														},
														"DataToNumber": {
															"value": "@item().DataToNumber",
															"type": "Expression"
														},
														"DataFromTimestamp": {
															"value": "@item().DataFromTimestamp",
															"type": "Expression"
														},
														"DataToTimestamp": {
															"value": "@item().DataToTimestamp",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"concurrency": 7,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceSystemName": {
						"type": "string",
						"defaultValue": "DataExplorer"
					},
					"StreamName": {
						"type": "string",
						"defaultValue": "%"
					},
					"MaxIngestInstance": {
						"type": "int",
						"defaultValue": 30
					},
					"KeyVaultSQLConnString": {
						"type": "string",
						"defaultValue": "ADX-Datawarehouse"
					}
				},
				"folder": {
					"name": "ADX"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ADX-Ingest')]",
				"[concat(variables('factoryId'), '/pipelines/Generic-L1-Transform')]",
				"[concat(variables('factoryId'), '/pipelines/Generic-L2-Transform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/API-Ingest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Generic Pipeline to ingest data from any API",
				"activities": [
					{
						"name": "Ingest Running",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set-DestinationRawFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[InsertIngestInstance]",
							"storedProcedureParameters": {
								"ADFPipelineRunID": {
									"value": {
										"value": "@variables('ADFPipelineRunID')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"DestinationRawFile": {
									"value": {
										"value": "@pipeline().parameters.DestinationRawFile",
										"type": "Expression"
									},
									"type": "String"
								},
								"DestinationRawFileSystem": {
									"value": {
										"value": "@pipeline().parameters.DestinationRawFileSystem",
										"type": "Expression"
									},
									"type": "String"
								},
								"DestinationRawFolder": {
									"value": {
										"value": "@pipeline().parameters.DestinationRawFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"IngestID": {
									"value": {
										"value": "@pipeline().parameters.IngestID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ReloadFlag": {
									"value": {
										"value": "@pipeline().parameters.ReloadFlag",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"SourceFileDropFile": {
									"value": null,
									"type": "String"
								},
								"SourceFileDropFileSystem": {
									"value": null,
									"type": "String"
								},
								"SourceFileDropFolder": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ADFPipelineRunID",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ADFPipelineRunID",
							"value": {
								"value": "@{if(empty(pipeline().parameters.ADFPipelineRunID),pipeline().RunId,pipeline().parameters.ADFPipelineRunID)}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Ingest Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-RawZone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestInstance]",
							"storedProcedureParameters": {
								"ADFIngestPipelineRunID": {
									"value": {
										"value": "@variables('ADFPipelineRunID')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"DataFromNumber": {
									"value": null,
									"type": "Int32"
								},
								"DataFromTimestamp": {
									"value": null,
									"type": "DateTime"
								},
								"DataToNumber": {
									"value": null,
									"type": "Int32"
								},
								"DataToTimestamp": {
									"value": null,
									"type": "DateTime"
								},
								"IngestCount": {
									"value": {
										"value": "@activity('Copy-RawZone').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"IngestStatus": {
									"value": "Success",
									"type": "String"
								},
								"ReloadFlag": {
									"value": {
										"value": "@pipeline().parameters.ReloadFlag",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"SourceCount": {
									"value": {
										"value": "@activity('Copy-RawZone').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Ingest Failure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-RawZone",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestInstance]",
							"storedProcedureParameters": {
								"ADFIngestPipelineRunID": {
									"value": {
										"value": "@variables('ADFPipelineRunID')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"DataFromNumber": {
									"value": null,
									"type": "Int32"
								},
								"DataFromTimestamp": {
									"value": null,
									"type": "DateTime"
								},
								"DataToNumber": {
									"value": null,
									"type": "Int32"
								},
								"DataToTimestamp": {
									"value": null,
									"type": "DateTime"
								},
								"IngestCount": {
									"value": null,
									"type": "Int32"
								},
								"IngestStatus": {
									"value": "Failure",
									"type": "String"
								},
								"ReloadFlag": {
									"value": {
										"value": "@pipeline().parameters.ReloadFlag",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"SourceCount": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get L1Transform Definition",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Ingest Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformDefinition_L1]",
								"storedProcedureParameters": {
									"WatermarkDate": {
										"type": "DateTime",
										"value": {
											"value": "@pipeline().parameters.DataFromTimestamp",
											"type": "Expression"
										}
									},
									"IngestID": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.IngestID",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get L2Transform Definition",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach L1Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformDefinition_L2]",
								"storedProcedureParameters": {
									"WatermarkDate": {
										"type": "DateTime",
										"value": {
											"value": "@pipeline().parameters.DataFromTimestamp",
											"type": "Expression"
										}
									},
									"IngestID": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.IngestID",
											"type": "Expression"
										}
									},
									"InputType": {
										"type": "String",
										"value": "Raw"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach L2Transform",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get L2Transform Definition",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get L2Transform Definition').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Insert L2Transform Instance",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ELT].[InsertTransformInstance_L2]",
										"storedProcedureParameters": {
											"DataFromNumber": {
												"value": {
													"value": "@item().DataFromNumber",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"DataFromTimestamp": {
												"value": {
													"value": "@item().DataToTimestamp",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"DataToNumber": {
												"value": {
													"value": "@item().DataToNumber",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"DataToTimestamp": {
												"value": {
													"value": "@item().DataToTimestamp",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"WatermarkName": {
												"value": {
													"value": "@item().WatermarkName",
													"type": "Expression"
												},
												"type": "String"
											},
											"IngestADFPipelineRunID": {
												"value": {
													"value": "@variables('ADFPipelineRunID')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"IngestID": {
												"value": {
													"value": "@item().IngestID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"InputDWTable": {
												"value": {
													"value": "@item().InputDWTable",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputFile": {
												"value": {
													"value": "@item().InputFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputFileDelimiter": {
												"value": {
													"value": "@item().InputFileDelimiter",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputFileFolder": {
												"value": {
													"value": "@item().InputFileFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputFileHeaderFlag": {
												"value": {
													"value": "@item().InputFileHeaderFlag",
													"type": "Expression"
												},
												"type": "Boolean"
											},
											"InputFileSystem": {
												"value": {
													"value": "@item().InputFileSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"L1TransformADFPipelineRunID": {
												"value": null,
												"type": "Guid"
											},
											"L1TransformID": {
												"value": {
													"value": "@item().L1TransformID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"L2TransformID": {
												"value": {
													"value": "@item().L2TransformID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"LastWatermarkDate": {
												"value": null,
												"type": "DateTime"
											},
											"LastWatermarkNumber": {
												"value": null,
												"type": "Int32"
											},
											"LookupColumns": {
												"value": {
													"value": "@item().LookupColumns",
													"type": "Expression"
												},
												"type": "String"
											},
											"MaxRetries": {
												"value": {
													"value": "@item().MaxRetries",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"NotebookName": {
												"value": {
													"value": "@item().NotebookName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NotebookPath": {
												"value": {
													"value": "@item().NotebookPath",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputDWStagingTable": {
												"value": {
													"value": "@item().OutputDWStagingTable",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputDWTable": {
												"value": {
													"value": "@item().OutputDWTable",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputDWTableWriteMode": {
												"value": {
													"value": "@item().OutputDWTableWriteMode",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFile": {
												"value": {
													"value": "@item().OutputL2CuratedFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFileDelimiter": {
												"value": {
													"value": "@item().OutputL2CuratedFileDelimiter",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFileFormat": {
												"value": {
													"value": "@item().OutputL2CuratedFileFormat",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFileWriteMode": {
												"value": {
													"value": "@item().OutputL2CuratedFileWriteMode",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFolder": {
												"value": {
													"value": "@item().OutputL2CuratedFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CurateFileSystem": {
												"value": {
													"value": "@item().OutputL2CurateFileSystem",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ForEach L1Transform",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get L1Transform Definition",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get L1Transform Definition').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Insert L1Transform Instance",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ELT].[InsertTransformInstance_L1]",
										"storedProcedureParameters": {
											"IngestADFPipelineRunID": {
												"value": {
													"value": "@variables('ADFPipelineRunID')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"IngestCount": {
												"value": {
													"value": "@activity('Copy-RawZone').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"IngestID": {
												"value": {
													"value": "@item().IngestID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"IngestInstanceID": {
												"value": null,
												"type": "Int32"
											},
											"InputFileHeaderFlag": {
												"value": {
													"value": "@item().InputFileHeaderFlag",
													"type": "Expression"
												},
												"type": "Boolean"
											},
											"InputRawFile": {
												"value": {
													"value": "@variables('_DestinationRawFile')",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputRawFileDelimiter": {
												"value": {
													"value": "@item().InputRawFileDelimiter",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputRawFileFolder": {
												"value": {
													"value": "@pipeline().parameters.DestinationRawFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputRawFileSystem": {
												"value": {
													"value": "@pipeline().parameters.DestinationRawFileSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"L1TransformID": {
												"value": {
													"value": "@item().L1TransformID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"LookupColumns": {
												"value": {
													"value": "@item().LookupColumns",
													"type": "Expression"
												},
												"type": "String"
											},
											"NotebookName": {
												"value": {
													"value": "@item().NotebookName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NotebookPath": {
												"value": {
													"value": "@item().NotebookPath",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityName": {
												"value": {
													"value": "@item().OutputEntityName",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityWriteMode": {
												"value": {
													"value": "@item().OutputEntityWriteMode",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityFolder": {
												"value": {
													"value": "@item().OutputEntityFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityFileSystem": {
												"value": {
													"value": "@item().OutputEntityFileSystem",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Copy-RawZone",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Ingest Running",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "REST_Json",
								"type": "DatasetReference",
								"parameters": {
									"EntityName": {
										"value": "@pipeline().parameters.EntityName",
										"type": "Expression"
									},
									"KeyVaultSecretBaseURL": {
										"value": "@pipeline().parameters.KeyVaultSecretBaseURL",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Bronze_JSON",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": {
										"value": "@pipeline().parameters.DestinationRawFileSystem",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.DestinationRawFolder",
										"type": "Expression"
									},
									"File": {
										"value": "@variables('_DestinationRawFile')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set-DestinationRawFile",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ADFPipelineRunID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_DestinationRawFile",
							"value": {
								"value": "@replace(pipeline().parameters.DestinationRawFile,'GUID',variables('ADFPipelineRunID'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"IngestID": {
						"type": "int",
						"defaultValue": 7
					},
					"SourceSystemName": {
						"type": "string",
						"defaultValue": "Open Weather API"
					},
					"StreamName": {
						"type": "string",
						"defaultValue": "Daily Weather"
					},
					"Backend": {
						"type": "string",
						"defaultValue": "Rest - Anonymous"
					},
					"EntityName": {
						"type": "string",
						"defaultValue": "http://api.openweathermap.org/data/2.5/weather?q=Sydney&APPID="
					},
					"WatermarkName": {
						"type": "string",
						"defaultValue": "1"
					},
					"LastWatermarkDate": {
						"type": "string",
						"defaultValue": "1"
					},
					"DataFromTimestamp": {
						"type": "string",
						"defaultValue": "1900-01-01 00:00:00.0000000"
					},
					"DataToTimestamp": {
						"type": "string",
						"defaultValue": "2022-10-05 15:12:47.0000000"
					},
					"LastWatermarkNumber": {
						"type": "int",
						"defaultValue": 1
					},
					"DataFromNumber": {
						"type": "int",
						"defaultValue": 1
					},
					"DataToNumber": {
						"type": "int",
						"defaultValue": 1
					},
					"DataFormat": {
						"type": "string",
						"defaultValue": "None"
					},
					"SourceStructure": {
						"type": "string",
						"defaultValue": "None"
					},
					"MaxIntervalMinutes": {
						"type": "int",
						"defaultValue": 1
					},
					"MaxIntervalNumber": {
						"type": "int",
						"defaultValue": 1
					},
					"DataMapping": {
						"type": "string",
						"defaultValue": "None"
					},
					"RunSequence": {
						"type": "int",
						"defaultValue": 100
					},
					"ActiveFlag": {
						"type": "bool",
						"defaultValue": true
					},
					"L1TransformationReqdFlag": {
						"type": "string",
						"defaultValue": "true"
					},
					"L2TransformationReqdFlag": {
						"type": "string",
						"defaultValue": "true"
					},
					"DelayL1TransformationFlag": {
						"type": "bool",
						"defaultValue": true
					},
					"DelayL2TransformationFlag": {
						"type": "bool",
						"defaultValue": true
					},
					"DestinationRawFileSystem": {
						"type": "string",
						"defaultValue": "raw-bronze"
					},
					"DestinationRawFolder": {
						"type": "string",
						"defaultValue": "weather/daily/2022-10"
					},
					"DestinationRawFile": {
						"type": "string",
						"defaultValue": "weather_daily_20221005.json"
					},
					"SourceQuery": {
						"type": "string",
						"defaultValue": "None"
					},
					"StatQuery": {
						"type": "string",
						"defaultValue": "None"
					},
					"ReloadFlag": {
						"type": "bool",
						"defaultValue": true
					},
					"ADFPipelineRunID": {
						"type": "string",
						"defaultValue": "9999"
					},
					"KeyVaultSecretBaseURL": {
						"type": "string",
						"defaultValue": "d7fe1a78534a3f8fa2edce320a06b440"
					}
				},
				"variables": {
					"ADFPipelineRunID": {
						"type": "String"
					},
					"_DestinationRawFile": {
						"type": "String"
					}
				},
				"folder": {
					"name": "API"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/REST_Json')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FileDrop-Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Generic pipeline for files dropped into Drop Zone",
				"activities": [
					{
						"name": "Get-IngestDefinition-FileDrop",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set-SourceSystemName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set-StreamName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetIngestDefinition_FileDrop]",
								"storedProcedureParameters": {
									"SourceFile": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceFile",
											"type": "Expression"
										}
									},
									"SourceFolder": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceFolder",
											"type": "Expression"
										}
									},
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@variables('varSourceSystemName')",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@variables('varStreamName')",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "FileDrop-Ingest",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get-IngestDefinition-FileDrop",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FileDrop-Ingest",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"IngestID": {
									"value": "@activity('Get-IngestDefinition-FileDrop').output.firstRow.IngestID",
									"type": "Expression"
								},
								"SourceSystemName": {
									"value": "@activity('Get-IngestDefinition-FileDrop').output.firstRow.SourceSystemName",
									"type": "Expression"
								},
								"StreamName": {
									"value": "@activity('Get-IngestDefinition-FileDrop').output.firstRow.StreamName",
									"type": "Expression"
								},
								"SourceFileDropFileSystem": {
									"value": "@activity('Get-IngestDefinition-FileDrop').output.firstRow.SourceFileDropFileSystem",
									"type": "Expression"
								},
								"SourceFileDropFolder": {
									"value": "@activity('Get-IngestDefinition-FileDrop').output.firstRow.SourceFileDropFolder",
									"type": "Expression"
								},
								"SourceFileDropFile": {
									"value": "@activity('Get-IngestDefinition-FileDrop').output.firstRow.SourceFileDropFile",
									"type": "Expression"
								},
								"DestinationRawFileSystem": {
									"value": "@activity('Get-IngestDefinition-FileDrop').output.firstRow.DestinationRawFileSystem",
									"type": "Expression"
								},
								"DestinationRawFolder": {
									"value": "@activity('Get-IngestDefinition-FileDrop').output.firstRow.DestinationRawFolder",
									"type": "Expression"
								},
								"DestinationRawFile": {
									"value": "@activity('Get-IngestDefinition-FileDrop').output.firstRow.DestinationRawFile",
									"type": "Expression"
								},
								"ReloadFlag": {
									"value": "@activity('Get-IngestDefinition-FileDrop').output.firstRow.ReloadFlag",
									"type": "Expression"
								},
								"L1TransformationReqdFlag": {
									"value": "@activity('Get-IngestDefinition-FileDrop').output.firstRow.L1TransformationReqdFlag",
									"type": "Expression"
								},
								"L2TransformationReqdFlag": {
									"value": "@activity('Get-IngestDefinition-FileDrop').output.firstRow.L2TransformationReqdFlag",
									"type": "Expression"
								},
								"DataFormat": {
									"value": "@activity('Get-IngestDefinition-FileDrop').output.firstRow.DataFormat",
									"type": "Expression"
								},
								"SourceFileDelimiter": {
									"value": "@activity('Get-IngestDefinition-FileDrop').output.firstRow.SourceFileDelimiter",
									"type": "Expression"
								},
								"SourceFileHeaderFlag": {
									"value": "@activity('Get-IngestDefinition-FileDrop').output.firstRow.SourceFileHeaderFlag",
									"type": "Expression"
								},
								"DataMapping": {
									"value": "@activity('Get-IngestDefinition-FileDrop').output.firstRow.DataMapping",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get-L1-Transform",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "FileDrop-Ingest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L1]",
								"storedProcedureParameters": {
									"DelayL1TransformationFlag": {
										"type": "Int32",
										"value": "0"
									},
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@variables('varSourceSystemName')",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@variables('varStreamName')",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "L1-Transform",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-L1-Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-L1-Transform').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check-L1-Instance-Status",
									"description": "Check the current L1 Instance is not running or completed.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L1]",
											"storedProcedureParameters": {
												"L1TransformInstanceId": {
													"type": "Int32",
													"value": {
														"value": "@item().L1TransformInstanceID",
														"type": "Expression"
													}
												},
												"SourceSystemName": {
													"type": "String",
													"value": {
														"value": "@variables('varSourceSystemName')",
														"type": "Expression"
													}
												},
												"StreamName": {
													"type": "String",
													"value": {
														"value": "@variables('varStreamName')",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If-L1-Transform-Pipeline",
									"description": "If Lookup returns a row continue",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-L1-Instance-Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Check-L1-Instance-Status').output?.firstRow, null)) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Generic-L1Transform",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Generic-L1-Transform",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"L1TransformInstanceID": {
															"value": "@item().L1TransformInstanceID",
															"type": "Expression"
														},
														"L1TransformID": {
															"value": "@item().L1TransformID",
															"type": "Expression"
														},
														"IngestID": {
															"value": "@item().IngestID",
															"type": "Expression"
														},
														"NotebookParameters": {
															"value": "@item().NotebookParameters",
															"type": "Expression"
														},
														"NotebookName": {
															"value": "@item().NotebookName",
															"type": "Expression"
														},
														"NotebookPath": {
															"value": "@item().NotebookPath",
															"type": "Expression"
														},
														"MaxRetries": {
															"value": "@item().MaxRetries",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Set-SourceSystemName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varSourceSystemName",
							"value": {
								"value": "@{split(pipeline().parameters.SourceFile, '_')[0]}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set-StreamName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "varStreamName",
							"value": {
								"value": "@{split(pipeline().parameters.SourceFile, '_')[1]}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get-L2-Transform-DeltaLake",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "L1-Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
								"storedProcedureParameters": {
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@variables('varSourceSystemName')",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@variables('varStreamName')",
											"type": "Expression"
										}
									},
									"DelayL2TransformationFlag": {
										"type": "Int16",
										"value": "0"
									},
									"InputType": {
										"type": "String",
										"value": "DeltaLake"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "L2-Transform-DeltaLake",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-L2-Transform-DeltaLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-L2-Transform-DeltaLake').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check-L2-Instance-Status-DeltaLake",
									"description": "Check the current L2 Instance is not running or completed.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
											"storedProcedureParameters": {
												"L2TransformInstanceId": {
													"type": "Int32",
													"value": {
														"value": "@item().L2TransformInstanceID",
														"type": "Expression"
													}
												},
												"SourceSystemName": {
													"type": "String",
													"value": {
														"value": "@variables('varSourceSystemName')",
														"type": "Expression"
													}
												},
												"StreamName": {
													"type": "String",
													"value": {
														"value": "@variables('varStreamName')",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If-L2-Transform-Pipeline-DeltaLake",
									"description": "If Lookup returns a row continue",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-L2-Instance-Status-DeltaLake",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Check-L2-Instance-Status-DeltaLake').output?.firstRow, null)) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Generic-L2Transform-DW",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Generic-L2-Transform",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"L2TransformInstanceID": {
															"value": "@item().L2TransformInstanceID",
															"type": "Expression"
														},
														"L2TransformID": {
															"value": "@item().L2TransformID",
															"type": "Expression"
														},
														"IngestID": {
															"value": "@item().IngestID",
															"type": "Expression"
														},
														"L1TransformID": {
															"value": "@item().L1TransformID",
															"type": "Expression"
														},
														"NotebookName": {
															"value": "@item().NotebookName",
															"type": "Expression"
														},
														"NotebookPath": {
															"value": "@item().NotebookPath",
															"type": "Expression"
														},
														"ReRunL2TransformFlag": {
															"value": "@item().ReRunL2TransformFlag",
															"type": "Expression"
														},
														"MaxRetries": {
															"value": "@item().MaxRetries",
															"type": "Expression"
														},
														"NotebookParameters": {
															"value": "@item().NotebookParameters",
															"type": "Expression"
														},
														"DataFromNumber": {
															"value": "@item().DataFromNumber",
															"type": "Expression"
														},
														"DataToNumber": {
															"value": "@item().DataToNumber",
															"type": "Expression"
														},
														"DataFromTimestamp": {
															"value": "@item().DataFromTimestamp",
															"type": "Expression"
														},
														"DataToTimestamp": {
															"value": "@item().DataToTimestamp",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Get-L2-Transform-Raw",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "FileDrop-Ingest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
								"storedProcedureParameters": {
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@variables('varSourceSystemName')",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@variables('varStreamName')",
											"type": "Expression"
										}
									},
									"DelayL2TransformationFlag": {
										"type": "Int16",
										"value": "0"
									},
									"InputType": {
										"type": "String",
										"value": "Raw"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "L2-Transform-Raw",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-L2-Transform-Raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-L2-Transform-Raw').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check-L2-Instance-Status-Raw",
									"description": "Check the current L2 Instance is not running or completed.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
											"storedProcedureParameters": {
												"L2TransformInstanceId": {
													"type": "Int32",
													"value": {
														"value": "@item().L2TransformInstanceID",
														"type": "Expression"
													}
												},
												"SourceSystemName": {
													"type": "String",
													"value": {
														"value": "@variables('varSourceSystemName')",
														"type": "Expression"
													}
												},
												"StreamName": {
													"type": "String",
													"value": {
														"value": "@variables('varStreamName')",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If-L2-Transform-Pipeline-Raw",
									"description": "If Lookup returns a row continue",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-L2-Instance-Status-Raw",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Check-L2-Instance-Status-Raw').output?.firstRow, null)) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Generic-L2Transform-Raw",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Generic-L2-Transform",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"L2TransformInstanceID": {
															"value": "@item().L2TransformInstanceID",
															"type": "Expression"
														},
														"L2TransformID": {
															"value": "@item().L2TransformID",
															"type": "Expression"
														},
														"IngestID": {
															"value": "@item().IngestID",
															"type": "Expression"
														},
														"L1TransformID": {
															"value": "@item().L1TransformID",
															"type": "Expression"
														},
														"NotebookName": {
															"value": "@item().NotebookName",
															"type": "Expression"
														},
														"NotebookPath": {
															"value": "@item().NotebookPath",
															"type": "Expression"
														},
														"ReRunL2TransformFlag": {
															"value": "@item().ReRunL2TransformFlag",
															"type": "Expression"
														},
														"MaxRetries": {
															"value": "@item().MaxRetries",
															"type": "Expression"
														},
														"NotebookParameters": {
															"value": "@item().NotebookParameters",
															"type": "Expression"
														},
														"DataFromNumber": {
															"value": "@item().DataFromNumber",
															"type": "Expression"
														},
														"DataToNumber": {
															"value": "@item().DataToNumber",
															"type": "Expression"
														},
														"DataFromTimestamp": {
															"value": "@item().DataFromTimestamp",
															"type": "Expression"
														},
														"DataToTimestamp": {
															"value": "@item().DataToTimestamp",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFile": {
						"type": "string",
						"defaultValue": "ManualCRM_Sales_20221021.csv"
					},
					"SourceFolder": {
						"type": "string",
						"defaultValue": "Manual"
					},
					"SecretName": {
						"type": "string"
					}
				},
				"variables": {
					"varSourceSystemName": {
						"type": "String"
					},
					"varStreamName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "File Drop"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/FileDrop-Ingest')]",
				"[concat(variables('factoryId'), '/pipelines/Generic-L1-Transform')]",
				"[concat(variables('factoryId'), '/pipelines/Generic-L2-Transform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Generic-L1-Transform-Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get-TransformInstances-L1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 31,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L1]",
								"storedProcedureParameters": {
									"MaxTransformInstance": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.MaxTransformInstance",
											"type": "Expression"
										}
									},
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Transform-L1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-TransformInstances-L1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-TransformInstances-L1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check-L1-Instance-Status",
									"description": "Check the current L1 Instance is not running or completed.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L1]",
											"storedProcedureParameters": {
												"L1TransformInstanceId": {
													"type": "Int32",
													"value": {
														"value": "@item().L1TransformInstanceID",
														"type": "Expression"
													}
												},
												"SourceSystemName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.SourceSystemName",
														"type": "Expression"
													}
												},
												"StreamName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.StreamName",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "If-L1-Transform-Pipeline",
									"description": "If Lookup returns a row continue",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-L1-Instance-Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Check-L1-Instance-Status').output?.firstRow, null)) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Generic-L1Transform",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Generic-L1-Transform",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"L1TransformInstanceID": {
															"value": "@item().L1TransformInstanceID",
															"type": "Expression"
														},
														"L1TransformID": {
															"value": "@item().L1TransformID",
															"type": "Expression"
														},
														"IngestID": {
															"value": "@item().IngestID",
															"type": "Expression"
														},
														"MaxRetries": {
															"value": "@item().MaxRetries",
															"type": "Expression"
														},
														"NotebookParameters": {
															"value": "@item().NotebookParameters",
															"type": "Expression"
														},
														"NotebookName": {
															"value": "@item().NotebookName",
															"type": "Expression"
														},
														"NotebookPath": {
															"value": "@item().NotebookPath",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceSystemName": {
						"type": "string",
						"defaultValue": "Adventureworks"
					},
					"StreamName": {
						"type": "string",
						"defaultValue": "%"
					},
					"MaxTransformInstance": {
						"type": "string",
						"defaultValue": "15"
					}
				},
				"folder": {
					"name": "Transform Pipelines/L1Transform"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Generic-L1-Transform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Generic-L2-Transform-Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get-TransformInstances-L2",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
								"storedProcedureParameters": {
									"MaxTransformInstance": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.MaxTransformInstance",
											"type": "Expression"
										}
									},
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									},
									"InputType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.InputType",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Transform-L2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-TransformInstances-L2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-TransformInstances-L2').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check-L2-Instance-Status",
									"description": "Check the current L2 Instance is not running or completed.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
											"storedProcedureParameters": {
												"L2TransformInstanceId": {
													"type": "Int32",
													"value": {
														"value": "@item().L2TransformInstanceID",
														"type": "Expression"
													}
												},
												"SourceSystemName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.SourceSystemName",
														"type": "Expression"
													}
												},
												"StreamName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.StreamName",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "If-L2-Transform-Pipeline",
									"description": "If Lookup returns a row continue",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-L2-Instance-Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Check-L2-Instance-Status').output?.firstRow, null)) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Generic-L2Transform",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Generic-L2-Transform",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"L2TransformInstanceID": {
															"value": "@item().L2TransformInstanceID",
															"type": "Expression"
														},
														"L2TransformID": {
															"value": "@item().L2TransformID",
															"type": "Expression"
														},
														"IngestID": {
															"value": "@item().IngestID",
															"type": "Expression"
														},
														"L1TransformID": {
															"value": "@item().L1TransformID",
															"type": "Expression"
														},
														"NotebookName": {
															"value": "@item().NotebookName",
															"type": "Expression"
														},
														"NotebookPath": {
															"value": "@item().NotebookPath",
															"type": "Expression"
														},
														"ReRunL2TransformFlag": {
															"value": "@item().ReRunL2TransformFlag",
															"type": "Expression"
														},
														"MaxRetries": {
															"value": "@item().MaxRetries",
															"type": "Expression"
														},
														"NotebookParameters": {
															"value": "@item().NotebookParameters",
															"type": "Expression"
														},
														"DataFromNumber": {
															"value": "@item().DataFromNumber",
															"type": "Expression"
														},
														"DataToNumber": {
															"value": "@item().DataToNumber",
															"type": "Expression"
														},
														"DataFromTimestamp": {
															"value": "@item().DataFromTimestamp",
															"type": "Expression"
														},
														"DataToTimestamp": {
															"value": "@item().DataToTimestamp",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceSystemName": {
						"type": "string",
						"defaultValue": "ManualCRM"
					},
					"StreamName": {
						"type": "string",
						"defaultValue": "Sales"
					},
					"MaxTransformInstance": {
						"type": "string",
						"defaultValue": "10"
					},
					"resourceNameDW": {
						"type": "string",
						"defaultValue": "ag-bip-dev-sql01-dtw01"
					},
					"InputType": {
						"type": "string",
						"defaultValue": "%"
					}
				},
				"folder": {
					"name": "Transform Pipelines/L2Transform"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Generic-L2-Transform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLServer-Ingest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set-DestinationRawFile",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set-ADFIngestPipelineRunID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_DestinationRawFile",
							"value": {
								"value": "@replace(pipeline().parameters.DestinationRawFile,'GUID',variables('_ADFIngestPipelineRunID'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Insert-IngestInstance",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set-DestinationRawFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[InsertIngestInstance]",
							"storedProcedureParameters": {
								"ADFPipelineRunID": {
									"value": {
										"value": "@variables('_ADFIngestPipelineRunID')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"DestinationRawFile": {
									"value": {
										"value": "@variables('_DestinationRawFile')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DestinationRawFileSystem": {
									"value": {
										"value": "@pipeline().parameters.DestinationRawFileSystem",
										"type": "Expression"
									},
									"type": "String"
								},
								"DestinationRawFolder": {
									"value": {
										"value": "@pipeline().parameters.DestinationRawFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"IngestID": {
									"value": {
										"value": "@pipeline().parameters.IngestID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ReloadFlag": {
									"value": {
										"value": "@pipeline().parameters.ReloadFlag",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-Success-IngestInstance",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-RawZone",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get-Stats",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestInstance]",
							"storedProcedureParameters": {
								"ADFIngestPipelineRunID": {
									"value": {
										"value": "@variables('_ADFIngestPipelineRunID')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"DataFromTimestamp": {
									"value": {
										"value": "@pipeline().parameters.DataFromTimestamp",
										"type": "Expression"
									},
									"type": "Datetimeoffset"
								},
								"DataToTimestamp": {
									"value": {
										"value": "@if(equals(activity('Get-Stats').output.firstRow.DATATOTIMESTAMP, NULL),pipeline().parameters.DataToTimestamp,activity('Get-Stats').output.firstRow.DATATOTIMESTAMP)",
										"type": "Expression"
									},
									"type": "Datetimeoffset"
								},
								"IngestCount": {
									"value": {
										"value": "@activity('Copy-RawZone').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"IngestStatus": {
									"value": "Success",
									"type": "String"
								},
								"ReloadFlag": {
									"value": {
										"value": "@if(equals(pipeline().parameters.ReloadFlag,true),1,0)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SourceCount": {
									"value": {
										"value": "@activity('Get-Stats').output.firstRow.SourceCount",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-Failure-IngestInstance",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-RawZone",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Get-Stats",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestInstance]",
							"storedProcedureParameters": {
								"ADFIngestPipelineRunID": {
									"value": {
										"value": "@variables('_ADFIngestPipelineRunID')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"DataFromTimestamp": {
									"value": {
										"value": "@pipeline().parameters.DataFromTimestamp",
										"type": "Expression"
									},
									"type": "Datetimeoffset"
								},
								"DataToTimestamp": {
									"value": null,
									"type": "Datetimeoffset"
								},
								"IngestStatus": {
									"value": "Failure",
									"type": "String"
								},
								"ReloadFlag": {
									"value": {
										"value": "@if(equals(pipeline().parameters.ReloadFlag,true),1,0)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-Failure-IngestDefinition",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update-Failure-IngestInstance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestDefinition]",
							"storedProcedureParameters": {
								"IngestID": {
									"value": {
										"value": "@pipeline().parameters.IngestID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"IngestStatus": {
									"value": "Failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get-TransformDefinition-L1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update-Success-IngestDefinition",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformDefinition_L1]",
								"storedProcedureParameters": {
									"WatermarkDate": {
										"type": "Datetimeoffset",
										"value": {
											"value": "@pipeline().parameters.DataFromTimestamp",
											"type": "Expression"
										}
									},
									"IngestID": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.IngestID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Insert-TransformInstance-L1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-TransformDefinition-L1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-TransformDefinition-L1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Insert-TransformInstance-StoredProc",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ELT].[InsertTransformInstance_L1]",
										"storedProcedureParameters": {
											"IngestADFPipelineRunID": {
												"value": {
													"value": "@variables('_ADFIngestPipelineRunID')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"IngestCount": {
												"value": {
													"value": "@activity('Copy-RawZone').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"IngestID": {
												"value": {
													"value": "@item().IngestID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"InputRawFile": {
												"value": {
													"value": "@variables('_DestinationRawFile')",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputRawFileFolder": {
												"value": {
													"value": "@pipeline().parameters.DestinationRawFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputRawFileSystem": {
												"value": {
													"value": "@pipeline().parameters.DestinationRawFileSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"L1TransformID": {
												"value": {
													"value": "@item().L1TransformID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"NotebookName": {
												"value": {
													"value": "@item().NotebookName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NotebookPath": {
												"value": {
													"value": "@item().NotebookPath",
													"type": "Expression"
												},
												"type": "String"
											},
											"LookupColumns": {
												"value": {
													"value": "@item().LookupColumns",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityName": {
												"value": {
													"value": "@item().OutputEntityName",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityWriteMode": {
												"value": {
													"value": "@item().OutputEntityWriteMode",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityFolder": {
												"value": {
													"value": "@item().OutputEntityFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityFileSystem": {
												"value": {
													"value": "@item().OutputEntityFileSystem",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Copy-RawZone",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Insert-IngestInstance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.SourceQuery",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "SQLServer_Table",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": {
										"value": "@{split(pipeline().parameters.EntityName, '.')[0]}",
										"type": "Expression"
									},
									"TableName": {
										"value": "@replace(substring(pipeline().parameters.EntityName, indexof(pipeline().parameters.EntityName,'.'), sub(length(pipeline().parameters.EntityName), indexof(pipeline().parameters.EntityName,'.'))), '.', '')",
										"type": "Expression"
									},
									"SQLServerConnectionString": {
										"value": "@pipeline().parameters.KeyVaultSQLConnString",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Bronze_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": {
										"value": "@pipeline().parameters.DestinationRawFileSystem",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.DestinationRawFolder",
										"type": "Expression"
									},
									"File": {
										"value": "@variables('_DestinationRawFile')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set-ADFIngestPipelineRunID",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_ADFIngestPipelineRunID",
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get-TransformDefinition-L2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert-TransformInstance-L1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformDefinition_L2]",
								"storedProcedureParameters": {
									"WatermarkDate": {
										"type": "Datetimeoffset",
										"value": {
											"value": "@pipeline().parameters.DataFromTimestamp",
											"type": "Expression"
										}
									},
									"IngestID": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.IngestID",
											"type": "Expression"
										}
									},
									"InputType": {
										"type": "String",
										"value": "Raw"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Insert-TransformInstance-L2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-TransformDefinition-L2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-TransformDefinition-L2').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Insert-TransformInstance-L2-StoredProc",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ELT].[InsertTransformInstance_L2]",
										"storedProcedureParameters": {
											"IngestADFPipelineRunID": {
												"value": {
													"value": "@variables('_ADFIngestPipelineRunID')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"IngestID": {
												"value": {
													"value": "@item().IngestID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"InputEntityName": {
												"value": {
													"value": "@item().InputEntityName",
													"type": "Expression"
												},
												"type": "String"
											},
											"L1TransformID": {
												"value": {
													"value": "@item().L1TransformID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"L2TransformID": {
												"value": {
													"value": "@item().L2TransformID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"NotebookName": {
												"value": {
													"value": "@item().NotebookName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NotebookPath": {
												"value": {
													"value": "@item().NotebookPath",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFile": {
												"value": {
													"value": "@item().OutputL2CuratedFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFileFormat": {
												"value": {
													"value": "@item().OutputL2CuratedFileFormat",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFileWriteMode": {
												"value": {
													"value": "@item().OutputL2CuratedFileWriteMode",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFolder": {
												"value": {
													"value": "@item().OutputL2CuratedFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CurateFileSystem": {
												"value": {
													"value": "@item().OutputL2CurateFileSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"MaxRetries": {
												"value": {
													"value": "@item().MaxRetries",
													"type": "Expression"
												},
												"type": "Int"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Update-Success-IngestDefinition",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update-Success-IngestInstance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestDefinition]",
							"storedProcedureParameters": {
								"IngestID": {
									"value": {
										"value": "@pipeline().parameters.IngestID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"LastWatermarkDate": {
									"value": {
										"value": "@if(equals(activity('Get-Stats').output.firstRow.DATATOTIMESTAMP, NULL),pipeline().parameters.DataToTimestamp,activity('Get-Stats').output.firstRow.DATATOTIMESTAMP)",
										"type": "Expression"
									},
									"type": "Datetimeoffset"
								},
								"IngestStatus": {
									"value": "Success",
									"type": "String"
								},
								"ReloadFlag": {
									"value": {
										"value": "@if(equals(pipeline().parameters.ReloadFlag,true),1,0)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get-Stats",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert-IngestInstance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.StatQuery",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLServer_Table",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": {
										"value": "@{split(pipeline().parameters.EntityName, '.')[0]}",
										"type": "Expression"
									},
									"TableName": {
										"value": "@replace(substring(pipeline().parameters.EntityName, indexof(pipeline().parameters.EntityName,'.'), sub(length(pipeline().parameters.EntityName), indexof(pipeline().parameters.EntityName,'.'))), '.', '')",
										"type": "Expression"
									},
									"SQLServerConnectionString": {
										"value": "@pipeline().parameters.KeyVaultSQLConnString",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"IngestID": {
						"type": "string",
						"defaultValue": "4"
					},
					"SourceSystemName": {
						"type": "string",
						"defaultValue": "Adventureworks"
					},
					"StreamName": {
						"type": "string",
						"defaultValue": "Person Address"
					},
					"EntityName": {
						"type": "string",
						"defaultValue": "Person.Address"
					},
					"DataFromTimestamp": {
						"type": "string",
						"defaultValue": "1900-01-01 00:00:00.0000000"
					},
					"DataToTimestamp": {
						"type": "string",
						"defaultValue": "2022-10-23 13:16:16.0000000"
					},
					"RunSequence": {
						"type": "string",
						"defaultValue": "100"
					},
					"L1TransformationReqdFlag": {
						"type": "bool",
						"defaultValue": true
					},
					"L2TransformationReqdFlag": {
						"type": "bool",
						"defaultValue": true
					},
					"DestinationRawFileSystem": {
						"type": "string",
						"defaultValue": "raw-bronze"
					},
					"DestinationRawFolder": {
						"type": "string",
						"defaultValue": "adventureworks/personaddress/1900-01"
					},
					"DestinationRawFile": {
						"type": "string",
						"defaultValue": "person_address_19000101_GUID.parquet"
					},
					"SourceQuery": {
						"type": "string",
						"defaultValue": "SELECT * FROM Person.Address WHERE ModifiedDate > '1900-01-01 00:00:00.000' AND ModifiedDate<='2022-10-23 13:16:16'"
					},
					"StatQuery": {
						"type": "string",
						"defaultValue": "SELECT MIN(ModifiedDate) AS DataFromTimestamp, MAX(ModifiedDate) AS DataToTimestamp, count(1) as SourceCount FROM Person.Address WHERE ModifiedDate > '1900-01-01 00:00:00.000' AND ModifiedDate <= '2022-10-23 13:16:16'"
					},
					"ReloadFlag": {
						"type": "bool",
						"defaultValue": false
					},
					"KeyVaultSQLConnString": {
						"type": "string",
						"defaultValue": "Adventureworks-SQLServer-ConnString"
					}
				},
				"variables": {
					"_ADFIngestPipelineRunID": {
						"type": "String"
					},
					"_DestinationRawFile": {
						"type": "String"
					},
					"_StatFileFolder": {
						"type": "String"
					},
					"_StatFile": {
						"type": "String"
					},
					"_StatFileSystem": {
						"type": "String"
					},
					"_DataFromTimestamp": {
						"type": "String"
					},
					"_DataToTimestamp": {
						"type": "String"
					},
					"_SourceCount": {
						"type": "String"
					},
					"_MaxDeltaDate": {
						"type": "String"
					},
					"_SchemaName": {
						"type": "String"
					},
					"_TableName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQLServer_Table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Salesforce-Ingest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set-DestinationRawFile",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set-ADFIngestPipelineRunID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_DestinationRawFile",
							"value": {
								"value": "@replace(pipeline().parameters.DestinationRawFile,'GUID',variables('_ADFIngestPipelineRunID'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Insert-IngestInstance",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set-DestinationRawFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[InsertIngestInstance]",
							"storedProcedureParameters": {
								"ADFPipelineRunID": {
									"value": {
										"value": "@variables('_ADFIngestPipelineRunID')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"DestinationRawFile": {
									"value": {
										"value": "@variables('_DestinationRawFile')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DestinationRawFileSystem": {
									"value": {
										"value": "@pipeline().parameters.DestinationRawFileSystem",
										"type": "Expression"
									},
									"type": "String"
								},
								"DestinationRawFolder": {
									"value": {
										"value": "@pipeline().parameters.DestinationRawFolder",
										"type": "Expression"
									},
									"type": "String"
								},
								"IngestID": {
									"value": {
										"value": "@pipeline().parameters.IngestID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ReloadFlag": {
									"value": {
										"value": "@pipeline().parameters.ReloadFlag",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-Success-IngestInstance",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-RawZone",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get-Stats",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestInstance]",
							"storedProcedureParameters": {
								"ADFIngestPipelineRunID": {
									"value": {
										"value": "@variables('_ADFIngestPipelineRunID')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"DataFromTimestamp": {
									"value": {
										"value": "@pipeline().parameters.DataFromTimestamp",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"DataToTimestamp": {
									"value": {
										"value": "@if(equals(activity('Get-Stats').output.firstRow.DATATOTIMESTAMP, NULL),pipeline().parameters.DataToTimestamp,activity('Get-Stats').output.firstRow.DATATOTIMESTAMP)",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"IngestCount": {
									"value": {
										"value": "@activity('Copy-RawZone').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"IngestStatus": {
									"value": "Success",
									"type": "String"
								},
								"ReloadFlag": {
									"value": {
										"value": "@if(equals(pipeline().parameters.ReloadFlag,true),1,0)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SourceCount": {
									"value": {
										"value": "@activity('Get-Stats').output.firstRow.SourceCount",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-Failure-IngestInstance",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy-RawZone",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "Get-Stats",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestInstance]",
							"storedProcedureParameters": {
								"ADFIngestPipelineRunID": {
									"value": {
										"value": "@variables('_ADFIngestPipelineRunID')",
										"type": "Expression"
									},
									"type": "Guid"
								},
								"DataFromTimestamp": {
									"value": {
										"value": "@pipeline().parameters.DataFromTimestamp",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"DataToTimestamp": {
									"value": null,
									"type": "DateTime"
								},
								"IngestStatus": {
									"value": "Failure",
									"type": "String"
								},
								"ReloadFlag": {
									"value": {
										"value": "@if(equals(pipeline().parameters.ReloadFlag,true),1,0)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Update-Failure-IngestDefinition",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update-Failure-IngestInstance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestDefinition]",
							"storedProcedureParameters": {
								"IngestID": {
									"value": {
										"value": "@pipeline().parameters.IngestID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"IngestStatus": {
									"value": "Failure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get-TransformDefinition-L1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update-Success-IngestDefinition",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformDefinition_L1]",
								"storedProcedureParameters": {
									"WatermarkDate": {
										"type": "DateTime",
										"value": {
											"value": "@pipeline().parameters.DataFromTimestamp",
											"type": "Expression"
										}
									},
									"IngestID": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.IngestID",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Insert-TransformInstance-L1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-TransformDefinition-L1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-TransformDefinition-L1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Insert-TransformInstance-StoredProc",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ELT].[InsertTransformInstance_L1]",
										"storedProcedureParameters": {
											"IngestADFPipelineRunID": {
												"value": {
													"value": "@variables('_ADFIngestPipelineRunID')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"IngestCount": {
												"value": {
													"value": "@activity('Copy-RawZone').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"IngestID": {
												"value": {
													"value": "@item().IngestID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"InputRawFile": {
												"value": {
													"value": "@variables('_DestinationRawFile')",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputRawFileFolder": {
												"value": {
													"value": "@pipeline().parameters.DestinationRawFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"InputRawFileSystem": {
												"value": {
													"value": "@pipeline().parameters.DestinationRawFileSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"L1TransformID": {
												"value": {
													"value": "@item().L1TransformID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"NotebookName": {
												"value": {
													"value": "@item().NotebookName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NotebookPath": {
												"value": {
													"value": "@item().NotebookPath",
													"type": "Expression"
												},
												"type": "String"
											},
											"LookupColumns": {
												"value": {
													"value": "@item().LookupColumns",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityName": {
												"value": {
													"value": "@item().OutputEntityName",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityWriteMode": {
												"value": {
													"value": "@item().OutputEntityWriteMode",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityFolder": {
												"value": {
													"value": "@item().OutputEntityFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputEntityFileSystem": {
												"value": {
													"value": "@item().OutputEntityFileSystem",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Copy-RawZone",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Insert-IngestInstance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SalesforceSource",
								"query": {
									"value": "@pipeline().parameters.SourceQuery",
									"type": "Expression"
								},
								"readBehavior": "query"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 32
						},
						"inputs": [
							{
								"referenceName": "Salesforce_Dataset",
								"type": "DatasetReference",
								"parameters": {
									"ObjectName": {
										"value": "@pipeline().parameters.EntityName",
										"type": "Expression"
									},
									"KeyVaultEnvironmentURL": {
										"value": "@pipeline().parameters.KeyVaultEnvironmentURL",
										"type": "Expression"
									},
									"KeyVaultUserName": {
										"value": "@pipeline().parameters.KeyVaultUserName",
										"type": "Expression"
									},
									"KeyVaultPassword": {
										"value": "@pipeline().parameters.KeyVaultPassword",
										"type": "Expression"
									},
									"KeyVaultSecurityToken": {
										"value": "@pipeline().parameters.KeyVaultSecurityToken",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Bronze_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": {
										"value": "@pipeline().parameters.DestinationRawFileSystem",
										"type": "Expression"
									},
									"Folder": {
										"value": "@pipeline().parameters.DestinationRawFolder",
										"type": "Expression"
									},
									"File": {
										"value": "@variables('_DestinationRawFile')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set-ADFIngestPipelineRunID",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_ADFIngestPipelineRunID",
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get-TransformDefinition-L2",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert-TransformInstance-L1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformDefinition_L2]",
								"storedProcedureParameters": {
									"WatermarkDate": {
										"type": "DateTime",
										"value": {
											"value": "@pipeline().parameters.DataFromTimestamp",
											"type": "Expression"
										}
									},
									"IngestID": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.IngestID",
											"type": "Expression"
										}
									},
									"InputType": {
										"type": "String",
										"value": "Raw"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Insert-TransformInstance-L2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-TransformDefinition-L2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-TransformDefinition-L2').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Insert-TransformInstance-L2-StoredProc",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ELT].[InsertTransformInstance_L2]",
										"storedProcedureParameters": {
											"IngestADFPipelineRunID": {
												"value": {
													"value": "@variables('_ADFIngestPipelineRunID')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"IngestID": {
												"value": {
													"value": "@item().IngestID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"InputEntityName": {
												"value": {
													"value": "@item().InputEntityName",
													"type": "Expression"
												},
												"type": "String"
											},
											"L1TransformID": {
												"value": {
													"value": "@item().L1TransformID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"L2TransformID": {
												"value": {
													"value": "@item().L2TransformID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"NotebookName": {
												"value": {
													"value": "@item().NotebookName",
													"type": "Expression"
												},
												"type": "String"
											},
											"NotebookPath": {
												"value": {
													"value": "@item().NotebookPath",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFile": {
												"value": {
													"value": "@item().OutputL2CuratedFile",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFileFormat": {
												"value": {
													"value": "@item().OutputL2CuratedFileFormat",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFileWriteMode": {
												"value": {
													"value": "@item().OutputL2CuratedFileWriteMode",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CuratedFolder": {
												"value": {
													"value": "@item().OutputL2CuratedFolder",
													"type": "Expression"
												},
												"type": "String"
											},
											"OutputL2CurateFileSystem": {
												"value": {
													"value": "@item().OutputL2CurateFileSystem",
													"type": "Expression"
												},
												"type": "String"
											},
											"MaxRetries": {
												"value": {
													"value": "@item().MaxRetries",
													"type": "Expression"
												},
												"type": "Int"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ControlDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Update-Success-IngestDefinition",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Update-Success-IngestInstance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ELT].[UpdateIngestDefinition]",
							"storedProcedureParameters": {
								"IngestID": {
									"value": {
										"value": "@pipeline().parameters.IngestID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"LastWatermarkDate": {
									"value": {
										"value": "@if(equals(activity('Get-Stats').output.firstRow.DATATOTIMESTAMP, NULL),pipeline().parameters.DataToTimestamp,activity('Get-Stats').output.firstRow.DATATOTIMESTAMP)",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"IngestStatus": {
									"value": "Success",
									"type": "String"
								},
								"ReloadFlag": {
									"value": {
										"value": "@if(equals(pipeline().parameters.ReloadFlag,true),1,0)",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ControlDB",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get-Stats",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert-IngestInstance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SalesforceSource",
								"query": {
									"value": "@pipeline().parameters.StatQuery",
									"type": "Expression"
								},
								"readBehavior": "query"
							},
							"dataset": {
								"referenceName": "Salesforce_Dataset",
								"type": "DatasetReference",
								"parameters": {
									"ObjectName": {
										"value": "@pipeline().parameters.EntityName",
										"type": "Expression"
									},
									"KeyVaultEnvironmentURL": {
										"value": "@pipeline().parameters.KeyVaultEnvironmentURL",
										"type": "Expression"
									},
									"KeyVaultUserName": {
										"value": "@pipeline().parameters.KeyVaultUserName",
										"type": "Expression"
									},
									"KeyVaultPassword": {
										"value": "@pipeline().parameters.KeyVaultPassword",
										"type": "Expression"
									},
									"KeyVaultSecurityToken": {
										"value": "@pipeline().parameters.KeyVaultSecurityToken",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"IngestID": {
						"type": "string",
						"defaultValue": "4"
					},
					"SourceSystemName": {
						"type": "string",
						"defaultValue": "MBS"
					},
					"StreamName": {
						"type": "string",
						"defaultValue": "Contract"
					},
					"EntityName": {
						"type": "string",
						"defaultValue": "Contacts"
					},
					"DataFromTimestamp": {
						"type": "string",
						"defaultValue": "2019-07-15 00:00:01.0000000"
					},
					"DataToTimestamp": {
						"type": "string",
						"defaultValue": "2019-07-16 00:00:00.0000000"
					},
					"RunSequence": {
						"type": "string",
						"defaultValue": "1"
					},
					"L1TransformationReqdFlag": {
						"type": "bool",
						"defaultValue": true
					},
					"L2TransformationReqdFlag": {
						"type": "bool",
						"defaultValue": true
					},
					"DestinationRawFileSystem": {
						"type": "string",
						"defaultValue": "raw-zone"
					},
					"DestinationRawFolder": {
						"type": "string",
						"defaultValue": "mbs/contract/2019/07/15"
					},
					"DestinationRawFile": {
						"type": "string",
						"defaultValue": "mbs_contract_20190715_00_GUID.parquet"
					},
					"SourceQuery": {
						"type": "string",
						"defaultValue": "select * from Contacts"
					},
					"StatQuery": {
						"type": "string",
						"defaultValue": "SELECT MIN(LAST_UPDATED) AS DataFromTimestamp, MAX(LAST_UPDATED) AS DataToTimestamp, count(1) as SourceCount FROM MBS.VWMBMDW_CONTRACT WHERE LAST_UPDATED BETWEEN '2019-07-15 00:00:00' AND '2019-07-16 00:00:00' WITH UR"
					},
					"ReloadFlag": {
						"type": "bool",
						"defaultValue": false
					},
					"KeyVaultEnvironmentURL": {
						"type": "string",
						"defaultValue": "Salesforce-EnvironmentURL"
					},
					"KeyVaultUserName": {
						"type": "string",
						"defaultValue": "Salesforce-UserName"
					},
					"KeyVaultPassword": {
						"type": "string",
						"defaultValue": "Salesforce-Password"
					},
					"KeyVaultSecurityToken": {
						"type": "string",
						"defaultValue": "Salesforce-SecurityToken"
					}
				},
				"variables": {
					"_ADFIngestPipelineRunID": {
						"type": "String"
					},
					"_DestinationRawFile": {
						"type": "String"
					},
					"_StatFileFolder": {
						"type": "String"
					},
					"_StatFile": {
						"type": "String"
					},
					"_StatFileSystem": {
						"type": "String"
					},
					"_DataFromTimestamp": {
						"type": "String"
					},
					"_DataToTimestamp": {
						"type": "String"
					},
					"_SourceCount": {
						"type": "String"
					},
					"_MaxDeltaDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Salesforce"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Salesforce_Dataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/API-Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Wrapper Pipeline that Extracts, Loads and Transforms data from a API data source",
				"activities": [
					{
						"name": "Get Ingest Instances",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetIngestDefinition]",
								"storedProcedureParameters": {
									"MaxIngestInstance": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.MaxIngestInstance",
											"type": "Expression"
										}
									},
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Ingest Instance",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Ingest Instances",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Ingest Instances').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "IngestREST",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "API-Ingest",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"IngestID": {
												"value": "@item().IngestID",
												"type": "Expression"
											},
											"SourceSystemName": {
												"value": "@item().SourceSystemName",
												"type": "Expression"
											},
											"StreamName": {
												"value": "@item().StreamName",
												"type": "Expression"
											},
											"Backend": {
												"value": "@item().Backend",
												"type": "Expression"
											},
											"EntityName": {
												"value": "@item().EntityName",
												"type": "Expression"
											},
											"WatermarkName": {
												"value": "@item().WatermarkName",
												"type": "Expression"
											},
											"LastWatermarkDate": {
												"value": "@item().LastWatermarkDate",
												"type": "Expression"
											},
											"DataFromTimestamp": {
												"value": "@item().DataFromTimestamp",
												"type": "Expression"
											},
											"DataToTimestamp": {
												"value": "@item().DataToTimestamp",
												"type": "Expression"
											},
											"LastWatermarkNumber": {
												"value": "@item().LastWatermarkNumber",
												"type": "Expression"
											},
											"DataFromNumber": {
												"value": "@item().DataFromNumber",
												"type": "Expression"
											},
											"DataToNumber": {
												"value": "@item().DataToNumber",
												"type": "Expression"
											},
											"DataFormat": {
												"value": "@item().DataFormat",
												"type": "Expression"
											},
											"SourceStructure": {
												"value": "@item().SourceStructure",
												"type": "Expression"
											},
											"MaxIntervalMinutes": {
												"value": "@item().MaxIntervalMinutes",
												"type": "Expression"
											},
											"MaxIntervalNumber": {
												"value": "@item().MaxIntervalNumber",
												"type": "Expression"
											},
											"DataMapping": {
												"value": "@item().DataMapping",
												"type": "Expression"
											},
											"RunSequence": {
												"value": "@item().RunSequence",
												"type": "Expression"
											},
											"ActiveFlag": {
												"value": "@item().ActiveFlag",
												"type": "Expression"
											},
											"L1TransformationReqdFlag": {
												"value": "@item().L1TransformationReqdFlag",
												"type": "Expression"
											},
											"L2TransformationReqdFlag": {
												"value": "@item().L2TransformationReqdFlag",
												"type": "Expression"
											},
											"DelayL1TransformationFlag": {
												"value": "@item().DelayL1TransformationFlag",
												"type": "Expression"
											},
											"DelayL2TransformationFlag": {
												"value": "@item().DelayL2TransformationFlag",
												"type": "Expression"
											},
											"DestinationRawFileSystem": {
												"value": "@item().DestinationRawFileSystem",
												"type": "Expression"
											},
											"DestinationRawFolder": {
												"value": "@item().DestinationRawFolder",
												"type": "Expression"
											},
											"DestinationRawFile": {
												"value": "@item().DestinationRawFile",
												"type": "Expression"
											},
											"SourceQuery": {
												"value": "@item().SourceQuery",
												"type": "Expression"
											},
											"StatQuery": {
												"value": "@item().StatQuery",
												"type": "Expression"
											},
											"ReloadFlag": {
												"value": "@item().ReloadFlag",
												"type": "Expression"
											},
											"ADFPipelineRunID": {
												"value": "@item().ADFPipelineRunID",
												"type": "Expression"
											},
											"KeyVaultSecretBaseURL": {
												"value": "@pipeline().parameters.KeyVaultSecretBaseURL",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get-L1-Transform",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach Ingest Instance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L1]",
								"storedProcedureParameters": {
									"DelayL1TransformationFlag": {
										"type": "Int32",
										"value": "0"
									},
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "L1-Transform",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-L1-Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-L1-Transform').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check-L1-Instance-Status",
									"description": "Check the current L1 Instance is not running or completed.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L1]",
											"storedProcedureParameters": {
												"L1TransformInstanceId": {
													"type": "Int32",
													"value": {
														"value": "@item().L1TransformInstanceID",
														"type": "Expression"
													}
												},
												"SourceSystemName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.SourceSystemName",
														"type": "Expression"
													}
												},
												"StreamName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.StreamName",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If-L1-Transform-Pipeline",
									"description": "If Lookup returns a row continue",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-L1-Instance-Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Check-L1-Instance-Status').output?.firstRow, null)) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Generic-L1Transform",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Generic-L1-Transform",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"L1TransformInstanceID": {
															"value": "@item().L1TransformInstanceID",
															"type": "Expression"
														},
														"L1TransformID": {
															"value": "@item().L1TransformID",
															"type": "Expression"
														},
														"IngestID": {
															"value": "@item().IngestID",
															"type": "Expression"
														},
														"MaxRetries": {
															"value": "@item().MaxRetries",
															"type": "Expression"
														},
														"NotebookParameters": {
															"value": "@item().NotebookParameters",
															"type": "Expression"
														},
														"NotebookName": {
															"value": "@item().NotebookName",
															"type": "Expression"
														},
														"NotebookPath": {
															"value": "@item().NotebookPath",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Get-L2-Transform-Raw",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach Ingest Instance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
								"storedProcedureParameters": {
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									},
									"DelayL2TransformationFlag": {
										"type": "Int32",
										"value": "0"
									},
									"InputType": {
										"type": "String",
										"value": "Raw"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "L2-Transform-Raw",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-L2-Transform-Raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-L2-Transform-Raw').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check-L2-Instance-Status-Raw",
									"description": "Check the current L2 Instance is not running or completed.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
											"storedProcedureParameters": {
												"L2TransformInstanceId": {
													"type": "Int32",
													"value": {
														"value": "@item().L2TransformInstanceID",
														"type": "Expression"
													}
												},
												"SourceSystemName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.SourceSystemName",
														"type": "Expression"
													}
												},
												"StreamName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.StreamName",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "If-L2-Transform-Pipeline",
									"description": "If Lookup returns a row continue",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-L2-Instance-Status-Raw",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Check-L2-Instance-Status-Raw').output?.firstRow, null)) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Generic-L2-Transform",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Generic-L2-Transform",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"L2TransformInstanceID": {
															"value": "@item().L2TransformInstanceID",
															"type": "Expression"
														},
														"L2TransformID": {
															"value": "@item().L2TransformID",
															"type": "Expression"
														},
														"IngestID": {
															"value": "@item().IngestID",
															"type": "Expression"
														},
														"L1TransformID": {
															"value": "@item().L1TransformID",
															"type": "Expression"
														},
														"NotebookName": {
															"value": "@item().NotebookName",
															"type": "Expression"
														},
														"NotebookPath": {
															"value": "@item().NotebookPath",
															"type": "Expression"
														},
														"ReRunL2TransformFlag": {
															"value": "@item().ReRunL2TransformFlag",
															"type": "Expression"
														},
														"MaxRetries": {
															"value": "@item().MaxRetries",
															"type": "Expression"
														},
														"NotebookParameters": {
															"value": "@item().NotebookParameters",
															"type": "Expression"
														},
														"DataFromNumber": {
															"value": "@item().DataFromNumber",
															"type": "Expression"
														},
														"DataToNumber": {
															"value": "@item().DataToNumber",
															"type": "Expression"
														},
														"DataFromTimestamp": {
															"value": "@item().DataFromTimestamp",
															"type": "Expression"
														},
														"DataToTimestamp": {
															"value": "@item().DataToTimestamp",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Get-L2-Transform-DeltaLake",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "L1-Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
								"storedProcedureParameters": {
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									},
									"DelayL2TransformationFlag": {
										"type": "Int16",
										"value": "0"
									},
									"InputType": {
										"type": "String",
										"value": "Datawarehouse"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "L2-Transform-DeltaLake",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-L2-Transform-DeltaLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-L2-Transform-DeltaLake').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check-L2-Instance-Status-DeltaLake",
									"description": "Check the current L2 Instance is not running or completed.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
											"storedProcedureParameters": {
												"L2TransformInstanceId": {
													"type": "Int32",
													"value": {
														"value": "@item().L2TransformInstanceID",
														"type": "Expression"
													}
												},
												"SourceSystemName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.SourceSystemName",
														"type": "Expression"
													}
												},
												"StreamName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.StreamName",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If-L2-Transform-Pipeline-DeltaLake",
									"description": "If Lookup returns a row continue",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-L2-Instance-Status-DeltaLake",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Check-L2-Instance-Status-DeltaLake').output?.firstRow, null)) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Generic-L2Transform-DW",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Generic-L2-Transform",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"L2TransformInstanceID": {
															"value": "@item().L2TransformInstanceID",
															"type": "Expression"
														},
														"L2TransformID": {
															"value": "@item().L2TransformID",
															"type": "Expression"
														},
														"IngestID": {
															"value": "@item().IngestID",
															"type": "Expression"
														},
														"L1TransformID": {
															"value": "@item().L1TransformID",
															"type": "Expression"
														},
														"NotebookName": {
															"value": "@item().NotebookName",
															"type": "Expression"
														},
														"NotebookPath": {
															"value": "@item().NotebookPath",
															"type": "Expression"
														},
														"ReRunL2TransformFlag": {
															"value": "@item().ReRunL2TransformFlag",
															"type": "Expression"
														},
														"MaxRetries": {
															"value": "@item().MaxRetries",
															"type": "Expression"
														},
														"NotebookParameters": {
															"value": "@item().NotebookParameters",
															"type": "Expression"
														},
														"DataFromNumber": {
															"value": "@item().DataFromNumber",
															"type": "Expression"
														},
														"DataToNumber": {
															"value": "@item().DataToNumber",
															"type": "Expression"
														},
														"DataFromTimestamp": {
															"value": "@item().DataFromTimestamp",
															"type": "Expression"
														},
														"DataToTimestamp": {
															"value": "@item().DataToTimestamp",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceSystemName": {
						"type": "string",
						"defaultValue": "Open Weather API"
					},
					"StreamName": {
						"type": "string",
						"defaultValue": "%"
					},
					"MaxIngestInstance": {
						"type": "string",
						"defaultValue": "20"
					},
					"KeyVaultSecretBaseURL": {
						"type": "string",
						"defaultValue": "OpenWeather-BaseURL"
					}
				},
				"folder": {
					"name": "API"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/API-Ingest')]",
				"[concat(variables('factoryId'), '/pipelines/Generic-L1-Transform')]",
				"[concat(variables('factoryId'), '/pipelines/Generic-L2-Transform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQLServer-Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get-IngestInstances",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetIngestDefinition]",
								"storedProcedureParameters": {
									"MaxIngestInstance": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.MaxIngestInstance",
											"type": "Expression"
										}
									},
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Ingest-Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-IngestInstances",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-IngestInstances').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "SQLServer-Ingest",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SQLServer-Ingest",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"IngestID": {
												"value": "@item().IngestID",
												"type": "Expression"
											},
											"SourceSystemName": {
												"value": "@item().SourceSystemName",
												"type": "Expression"
											},
											"StreamName": {
												"value": "@item().StreamName",
												"type": "Expression"
											},
											"EntityName": {
												"value": "@item().EntityName",
												"type": "Expression"
											},
											"DataFromTimestamp": {
												"value": "@item().DataFromTimestamp",
												"type": "Expression"
											},
											"DataToTimestamp": {
												"value": "@item().DataToTimestamp",
												"type": "Expression"
											},
											"RunSequence": {
												"value": "@item().RunSequence",
												"type": "Expression"
											},
											"L1TransformationReqdFlag": {
												"value": "@item().L1TransformationReqdFlag",
												"type": "Expression"
											},
											"L2TransformationReqdFlag": {
												"value": "@item().L2TransformationReqdFlag",
												"type": "Expression"
											},
											"DestinationRawFileSystem": {
												"value": "@item().DestinationRawFileSystem",
												"type": "Expression"
											},
											"DestinationRawFolder": {
												"value": "@item().DestinationRawFolder",
												"type": "Expression"
											},
											"DestinationRawFile": {
												"value": "@item().DestinationRawFile",
												"type": "Expression"
											},
											"SourceQuery": {
												"value": "@item().SourceQuery",
												"type": "Expression"
											},
											"StatQuery": {
												"value": "@item().StatQuery",
												"type": "Expression"
											},
											"ReloadFlag": {
												"value": "@item().ReloadFlag",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get-L1-Transform",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Ingest-Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L1]",
								"storedProcedureParameters": {
									"DelayL1TransformationFlag": {
										"type": "Int32",
										"value": "0"
									},
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "L1-Transform",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-L1-Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-L1-Transform').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check-L1-Instance-Status",
									"description": "Check the current L1 Instance is not running or completed.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L1]",
											"storedProcedureParameters": {
												"L1TransformInstanceId": {
													"type": "Int32",
													"value": {
														"value": "@item().L1TransformInstanceID",
														"type": "Expression"
													}
												},
												"SourceSystemName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.SourceSystemName",
														"type": "Expression"
													}
												},
												"StreamName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.StreamName",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If-L1-Transform-Pipeline",
									"description": "If Lookup returns a row continue",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-L1-Instance-Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Check-L1-Instance-Status').output?.firstRow, null)) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Generic-L1Transform",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Generic-L1-Transform",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"L1TransformInstanceID": {
															"value": "@item().L1TransformInstanceID",
															"type": "Expression"
														},
														"L1TransformID": {
															"value": "@item().L1TransformID",
															"type": "Expression"
														},
														"IngestID": {
															"value": "@item().IngestID",
															"type": "Expression"
														},
														"MaxRetries": {
															"value": "@item().MaxRetries",
															"type": "Expression"
														},
														"NotebookParameters": {
															"value": "@item().NotebookParameters",
															"type": "Expression"
														},
														"NotebookName": {
															"value": "@item().NotebookName",
															"type": "Expression"
														},
														"NotebookPath": {
															"value": "@item().NotebookPath",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Get-L2-Transform-DeltaLake",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "L1-Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
								"storedProcedureParameters": {
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									},
									"DelayL2TransformationFlag": {
										"type": "Int16",
										"value": "0"
									},
									"InputType": {
										"type": "String",
										"value": "DeltaLake"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "L2-Transform-DeltaLake",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-L2-Transform-DeltaLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-L2-Transform-DeltaLake').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check-L2-Instance-Status-DeltaLake",
									"description": "Check the current L2 Instance is not running or completed.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
											"storedProcedureParameters": {
												"L2TransformInstanceId": {
													"type": "Int32",
													"value": {
														"value": "@item().L2TransformInstanceID",
														"type": "Expression"
													}
												},
												"SourceSystemName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.SourceSystemName",
														"type": "Expression"
													}
												},
												"StreamName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.StreamName",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If-L2-Transform-Pipeline-DeltaLake",
									"description": "If Lookup returns a row continue",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-L2-Instance-Status-DeltaLake",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Check-L2-Instance-Status-DeltaLake').output?.firstRow, null)) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Generic-L2Transform-DW",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Generic-L2-Transform",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"L2TransformInstanceID": {
															"value": "@item().L2TransformInstanceID",
															"type": "Expression"
														},
														"L2TransformID": {
															"value": "@item().L2TransformID",
															"type": "Expression"
														},
														"IngestID": {
															"value": "@item().IngestID",
															"type": "Expression"
														},
														"L1TransformID": {
															"value": "@item().L1TransformID",
															"type": "Expression"
														},
														"NotebookName": {
															"value": "@item().NotebookName",
															"type": "Expression"
														},
														"NotebookPath": {
															"value": "@item().NotebookPath",
															"type": "Expression"
														},
														"ReRunL2TransformFlag": {
															"value": "@item().ReRunL2TransformFlag",
															"type": "Expression"
														},
														"MaxRetries": {
															"value": "@item().MaxRetries",
															"type": "Expression"
														},
														"NotebookParameters": {
															"value": "@item().NotebookParameters",
															"type": "Expression"
														},
														"DataFromNumber": {
															"value": "@item().DataFromNumber",
															"type": "Expression"
														},
														"DataToNumber": {
															"value": "@item().DataToNumber",
															"type": "Expression"
														},
														"DataFromTimestamp": {
															"value": "@item().DataFromTimestamp",
															"type": "Expression"
														},
														"DataToTimestamp": {
															"value": "@item().DataToTimestamp",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Get-L2-Transform-Raw",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Ingest-Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
								"storedProcedureParameters": {
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									},
									"DelayL2TransformationFlag": {
										"type": "Int16",
										"value": "0"
									},
									"InputType": {
										"type": "String",
										"value": "Raw"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "L2-Transform-Raw",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-L2-Transform-Raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-L2-Transform-Raw').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check-L2-Instance-Status-Raw",
									"description": "Check the current L2 Instance is not running or completed.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
											"storedProcedureParameters": {
												"L2TransformInstanceId": {
													"type": "Int32",
													"value": {
														"value": "@item().L2TransformInstanceID",
														"type": "Expression"
													}
												},
												"SourceSystemName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.SourceSystemName",
														"type": "Expression"
													}
												},
												"StreamName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.StreamName",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If-L2-Transform-Pipeline-DeltaLake_copy1",
									"description": "If Lookup returns a row continue",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-L2-Instance-Status-Raw",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Check-L2-Instance-Status-Raw').output?.firstRow, null)) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Generic-L2Transform-DW_copy1",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Generic-L2-Transform",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"L2TransformInstanceID": {
															"value": "@item().L2TransformInstanceID",
															"type": "Expression"
														},
														"L2TransformID": {
															"value": "@item().L2TransformID",
															"type": "Expression"
														},
														"IngestID": {
															"value": "@item().IngestID",
															"type": "Expression"
														},
														"L1TransformID": {
															"value": "@item().L1TransformID",
															"type": "Expression"
														},
														"NotebookName": {
															"value": "@item().NotebookName",
															"type": "Expression"
														},
														"NotebookPath": {
															"value": "@item().NotebookPath",
															"type": "Expression"
														},
														"ReRunL2TransformFlag": {
															"value": "@item().ReRunL2TransformFlag",
															"type": "Expression"
														},
														"MaxRetries": {
															"value": "@item().MaxRetries",
															"type": "Expression"
														},
														"NotebookParameters": {
															"value": "@item().NotebookParameters",
															"type": "Expression"
														},
														"DataFromNumber": {
															"value": "@item().DataFromNumber",
															"type": "Expression"
														},
														"DataToNumber": {
															"value": "@item().DataToNumber",
															"type": "Expression"
														},
														"DataFromTimestamp": {
															"value": "@item().DataFromTimestamp",
															"type": "Expression"
														},
														"DataToTimestamp": {
															"value": "@item().DataToTimestamp",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"concurrency": 7,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceSystemName": {
						"type": "string",
						"defaultValue": "Adventureworks"
					},
					"StreamName": {
						"type": "string",
						"defaultValue": "%"
					},
					"MaxIngestInstance": {
						"type": "int",
						"defaultValue": 30
					},
					"KeyVaultSQLConnString": {
						"type": "string",
						"defaultValue": "Adventureworks-SQLServer-ConnString"
					}
				},
				"folder": {
					"name": "SQL Server"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SQLServer-Ingest')]",
				"[concat(variables('factoryId'), '/pipelines/Generic-L1-Transform')]",
				"[concat(variables('factoryId'), '/pipelines/Generic-L2-Transform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Salesforce-Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get-IngestInstances",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetIngestDefinition]",
								"storedProcedureParameters": {
									"MaxIngestInstance": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.MaxIngestInstance",
											"type": "Expression"
										}
									},
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Ingest-Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-IngestInstances",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-IngestInstances').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Salesforce-Ingest",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Salesforce-Ingest",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"IngestID": {
												"value": "@item().IngestID",
												"type": "Expression"
											},
											"SourceSystemName": {
												"value": "@item().SourceSystemName",
												"type": "Expression"
											},
											"StreamName": {
												"value": "@item().StreamName",
												"type": "Expression"
											},
											"EntityName": {
												"value": "@item().EntityName",
												"type": "Expression"
											},
											"DataFromTimestamp": {
												"value": "@item().DataFromTimestamp",
												"type": "Expression"
											},
											"DataToTimestamp": {
												"value": "@item().DataToTimestamp",
												"type": "Expression"
											},
											"RunSequence": {
												"value": "@item().RunSequence",
												"type": "Expression"
											},
											"L1TransformationReqdFlag": {
												"value": "@item().L1TransformationReqdFlag",
												"type": "Expression"
											},
											"L2TransformationReqdFlag": {
												"value": "@item().L2TransformationReqdFlag",
												"type": "Expression"
											},
											"DestinationRawFileSystem": {
												"value": "@item().DestinationRawFileSystem",
												"type": "Expression"
											},
											"DestinationRawFolder": {
												"value": "@item().DestinationRawFolder",
												"type": "Expression"
											},
											"DestinationRawFile": {
												"value": "@item().DestinationRawFile",
												"type": "Expression"
											},
											"SourceQuery": {
												"value": "@item().SourceQuery",
												"type": "Expression"
											},
											"StatQuery": {
												"value": "@item().StatQuery",
												"type": "Expression"
											},
											"ReloadFlag": {
												"value": "@item().ReloadFlag",
												"type": "Expression"
											},
											"KeyVaultEnvironmentURL": {
												"value": "@pipeline().parameters.KeyVaultEnvironmentURL",
												"type": "Expression"
											},
											"KeyVaultUserName": {
												"value": "@pipeline().parameters.KeyVaultUserName",
												"type": "Expression"
											},
											"KeyVaultPassword": {
												"value": "@pipeline().parameters.KeyVaultPassword",
												"type": "Expression"
											},
											"KeyVaultSecurityToken": {
												"value": "@pipeline().parameters.KeyVaultSecurityToken",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get-L1-Transform",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Ingest-Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L1]",
								"storedProcedureParameters": {
									"DelayL1TransformationFlag": {
										"type": "Int32",
										"value": "0"
									},
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "L1-Transform",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-L1-Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-L1-Transform').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check-L1-Instance-Status",
									"description": "Check the current L1 Instance is not running or completed.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L1]",
											"storedProcedureParameters": {
												"L1TransformInstanceId": {
													"type": "Int32",
													"value": {
														"value": "@item().L1TransformInstanceID",
														"type": "Expression"
													}
												},
												"SourceSystemName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.SourceSystemName",
														"type": "Expression"
													}
												},
												"StreamName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.StreamName",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If-L1-Transform-Pipeline",
									"description": "If Lookup returns a row continue",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-L1-Instance-Status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Check-L1-Instance-Status').output?.firstRow, null)) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Generic-L1Transform",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Generic-L1-Transform",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"L1TransformInstanceID": {
															"value": "@item().L1TransformInstanceID",
															"type": "Expression"
														},
														"L1TransformID": {
															"value": "@item().L1TransformID",
															"type": "Expression"
														},
														"IngestID": {
															"value": "@item().IngestID",
															"type": "Expression"
														},
														"MaxRetries": {
															"value": "@item().MaxRetries",
															"type": "Expression"
														},
														"NotebookParameters": {
															"value": "@item().NotebookParameters",
															"type": "Expression"
														},
														"NotebookName": {
															"value": "@item().NotebookName",
															"type": "Expression"
														},
														"NotebookPath": {
															"value": "@item().NotebookPath",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Get-L2-Transform-DeltaLake",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "L1-Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
								"storedProcedureParameters": {
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									},
									"DelayL2TransformationFlag": {
										"type": "Int16",
										"value": "0"
									},
									"InputType": {
										"type": "String",
										"value": "DeltaLake"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "L2-Transform-DeltaLake",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-L2-Transform-DeltaLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-L2-Transform-DeltaLake').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check-L2-Instance-Status-DeltaLake",
									"description": "Check the current L2 Instance is not running or completed.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
											"storedProcedureParameters": {
												"L2TransformInstanceId": {
													"type": "Int32",
													"value": {
														"value": "@item().L2TransformInstanceID",
														"type": "Expression"
													}
												},
												"SourceSystemName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.SourceSystemName",
														"type": "Expression"
													}
												},
												"StreamName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.StreamName",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If-L2-Transform-Pipeline-DeltaLake",
									"description": "If Lookup returns a row continue",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-L2-Instance-Status-DeltaLake",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Check-L2-Instance-Status-DeltaLake').output?.firstRow, null)) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Generic-L2Transform-DW",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Generic-L2-Transform",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"L2TransformInstanceID": {
															"value": "@item().L2TransformInstanceID",
															"type": "Expression"
														},
														"L2TransformID": {
															"value": "@item().L2TransformID",
															"type": "Expression"
														},
														"IngestID": {
															"value": "@item().IngestID",
															"type": "Expression"
														},
														"L1TransformID": {
															"value": "@item().L1TransformID",
															"type": "Expression"
														},
														"NotebookName": {
															"value": "@item().NotebookName",
															"type": "Expression"
														},
														"NotebookPath": {
															"value": "@item().NotebookPath",
															"type": "Expression"
														},
														"ReRunL2TransformFlag": {
															"value": "@item().ReRunL2TransformFlag",
															"type": "Expression"
														},
														"MaxRetries": {
															"value": "@item().MaxRetries",
															"type": "Expression"
														},
														"NotebookParameters": {
															"value": "@item().NotebookParameters",
															"type": "Expression"
														},
														"DataFromNumber": {
															"value": "@item().DataFromNumber",
															"type": "Expression"
														},
														"DataToNumber": {
															"value": "@item().DataToNumber",
															"type": "Expression"
														},
														"DataFromTimestamp": {
															"value": "@item().DataFromTimestamp",
															"type": "Expression"
														},
														"DataToTimestamp": {
															"value": "@item().DataToTimestamp",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Get-L2-Transform-Raw",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Ingest-Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
								"storedProcedureParameters": {
									"SourceSystemName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.SourceSystemName",
											"type": "Expression"
										}
									},
									"StreamName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.StreamName",
											"type": "Expression"
										}
									},
									"DelayL2TransformationFlag": {
										"type": "Int16",
										"value": "0"
									},
									"InputType": {
										"type": "String",
										"value": "Raw"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ControlDB_Dataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "L2-Transform-Raw",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get-L2-Transform-Raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get-L2-Transform-Raw').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Check-L2-Instance-Status-Raw",
									"description": "Check the current L2 Instance is not running or completed.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[ELT].[GetTransformInstance_L2]",
											"storedProcedureParameters": {
												"L2TransformInstanceId": {
													"type": "Int32",
													"value": {
														"value": "@item().L2TransformInstanceID",
														"type": "Expression"
													}
												},
												"SourceSystemName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.SourceSystemName",
														"type": "Expression"
													}
												},
												"StreamName": {
													"type": "String",
													"value": {
														"value": "@pipeline().parameters.StreamName",
														"type": "Expression"
													}
												}
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ControlDB_Dataset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If-L2-Transform-Pipeline-DeltaLake_copy1",
									"description": "If Lookup returns a row continue",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Check-L2-Instance-Status-Raw",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(activity('Check-L2-Instance-Status-Raw').output?.firstRow, null)) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Generic-L2Transform-DW_copy1",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Generic-L2-Transform",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"L2TransformInstanceID": {
															"value": "@item().L2TransformInstanceID",
															"type": "Expression"
														},
														"L2TransformID": {
															"value": "@item().L2TransformID",
															"type": "Expression"
														},
														"IngestID": {
															"value": "@item().IngestID",
															"type": "Expression"
														},
														"L1TransformID": {
															"value": "@item().L1TransformID",
															"type": "Expression"
														},
														"NotebookName": {
															"value": "@item().NotebookName",
															"type": "Expression"
														},
														"NotebookPath": {
															"value": "@item().NotebookPath",
															"type": "Expression"
														},
														"ReRunL2TransformFlag": {
															"value": "@item().ReRunL2TransformFlag",
															"type": "Expression"
														},
														"MaxRetries": {
															"value": "@item().MaxRetries",
															"type": "Expression"
														},
														"NotebookParameters": {
															"value": "@item().NotebookParameters",
															"type": "Expression"
														},
														"DataFromNumber": {
															"value": "@item().DataFromNumber",
															"type": "Expression"
														},
														"DataToNumber": {
															"value": "@item().DataToNumber",
															"type": "Expression"
														},
														"DataFromTimestamp": {
															"value": "@item().DataFromTimestamp",
															"type": "Expression"
														},
														"DataToTimestamp": {
															"value": "@item().DataToTimestamp",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"concurrency": 7,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceSystemName": {
						"type": "string",
						"defaultValue": "Salesforce"
					},
					"StreamName": {
						"type": "string",
						"defaultValue": "%"
					},
					"MaxIngestInstance": {
						"type": "int",
						"defaultValue": 30
					},
					"KeyVaultEnvironmentURL": {
						"type": "string",
						"defaultValue": "Salesforce-EnvironmentURL"
					},
					"KeyVaultUserName": {
						"type": "string",
						"defaultValue": "Salesforce-UserName"
					},
					"KeyVaultPassword": {
						"type": "string",
						"defaultValue": "Salesforce-Password"
					},
					"KeyVaultSecurityToken": {
						"type": "string",
						"defaultValue": "Salesforce-SecurityToken"
					}
				},
				"folder": {
					"name": "Salesforce"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Salesforce-Ingest')]",
				"[concat(variables('factoryId'), '/pipelines/Generic-L1-Transform')]",
				"[concat(variables('factoryId'), '/pipelines/Generic-L2-Transform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DropZone - File Created')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Event based trigger to load and process generic CSV",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "FileDrop-Master",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceFile": "[parameters('DropZone - File Created_properties_FileDrop-Master_parameters_SourceFile')]",
							"SourceFolder": "[parameters('DropZone - File Created_properties_FileDrop-Master_parameters_SourceFolder')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/drop-zone/blobs/Manual",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('DropZone - File Created_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/FileDrop-Master')]"
			]
		}
	]
}